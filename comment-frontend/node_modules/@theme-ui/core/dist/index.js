var react = require('@emotion/react');
var React = require('react');
var deepmerge = require('deepmerge');
var packageInfo = require('@emotion/react/package.json');
var parseProps = require('@theme-ui/parse-props');
var css = require('@theme-ui/css');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var deepmerge__default = /*#__PURE__*/_interopDefaultLegacy(deepmerge);
var packageInfo__default = /*#__PURE__*/_interopDefaultLegacy(packageInfo);
var parseProps__default = /*#__PURE__*/_interopDefaultLegacy(parseProps);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var __EMOTION_VERSION__ = packageInfo__default['default'].version;
var jsx = function jsx(type, props) {
  return react.jsx.apply(void 0, [type, parseProps__default['default'](props)].concat([].slice.call(arguments, 2)));
};
var Context = React.createContext({
  __EMOTION_VERSION__: __EMOTION_VERSION__,
  theme: {}
});
var useThemeUI = function useThemeUI() {
  return React.useContext(Context);
};
var canUseSymbol = typeof Symbol === 'function' && Symbol["for"];
var REACT_ELEMENT = canUseSymbol ? Symbol["for"]('react.element') : 0xeac7;
var FORWARD_REF = canUseSymbol ? Symbol["for"]('react.forward_ref') : 0xeac7;
var deepmergeOptions = {
  isMergeableObject: function isMergeableObject(n) {
    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
  },
  arrayMerge: function arrayMerge(_leftArray, rightArray) {
    return rightArray;
  }
};
/**
 * Deeply merge themes
 */

var merge = function merge(a, b) {
  return deepmerge__default['default'](a, b, deepmergeOptions);
};

function mergeAll() {
  return deepmerge__default['default'].all([].slice.call(arguments), deepmergeOptions);
}

merge.all = mergeAll;

var BaseProvider = function BaseProvider(_ref) {
  var context = _ref.context,
      children = _ref.children;
  return jsx(react.ThemeContext.Provider, {
    value: context.theme
  }, jsx(Context.Provider, {
    value: context,
    children: children
  }));
};

function ThemeProvider(_ref2) {
  var theme = _ref2.theme,
      children = _ref2.children;
  var outer = useThemeUI();

  if (process.env.NODE_ENV !== 'production') {
    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {
      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');
    }
  }

  var context = typeof theme === 'function' ? _extends({}, outer, {
    theme: theme(outer.theme)
  }) : merge.all({}, outer, {
    theme: theme
  });
  return jsx(BaseProvider, {
    context: context
  }, children);
}

Object.defineProperty(exports, '__internalGetUseRootStyles', {
  enumerable: true,
  get: function () {
    return css.__internalGetUseRootStyles;
  }
});
exports.Context = Context;
exports.ThemeProvider = ThemeProvider;
exports.jsx = jsx;
exports.merge = merge;
exports.useThemeUI = useThemeUI;
//# sourceMappingURL=index.js.map
