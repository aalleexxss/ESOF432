(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@theme-ui/core'), require('@theme-ui/css'), require('@emotion/react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', '@theme-ui/core', '@theme-ui/css', '@emotion/react'], factory) :
  (global = global || self, factory(global.colorModes = {}, global.react, global.core, global.css, global.react));
}(this, (function (exports, React, core, css, react) {
  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var stripKeyDefault = function stripKeyDefault(key) {
    return key.replace('-__default', '');
  };

  var toVarName = function toVarName(key) {
    return "--theme-ui-" + stripKeyDefault(key);
  };

  var toVarValue = function toVarValue(key, value) {
    return "var(" + toVarName(key) + ", " + value + ")";
  };

  var join = function join() {
    return [].slice.call(arguments).filter(Boolean).join('-');
  };

  var numberScales = {
    fontWeights: true,
    lineHeights: true
  };
  var reservedKeys = {
    useCustomProperties: true,
    initialColorModeName: true,
    printColorModeName: true,
    initialColorMode: true,
    useLocalStorage: true
  };

  var toPixel = function toPixel(key, value) {
    if (typeof value !== 'number') return value;
    if (numberScales[key]) return value;
    return value + 'px';
  }; // convert theme values to custom properties


  var toCustomProperties = function toCustomProperties(obj, parent, themeKey) {
    var next = Array.isArray(obj) ? [] : {};

    for (var key in obj) {
      var value = obj[key];
      var name = join(parent, key);

      if (value && typeof value === 'object') {
        next[key] = toCustomProperties(value, name, key);
        continue;
      }

      if (reservedKeys[key]) {
        next[key] = value;
        continue;
      }

      var val = toPixel(themeKey || key, value);
      next[key] = toVarValue(name, val);
    }

    return next;
  };
  var objectToVars = function objectToVars(parent, obj) {
    var vars = {};

    for (var key in obj) {
      if (key === 'modes') continue;
      var name = join(parent, key);
      var value = obj[key];

      if (value && typeof value === 'object') {
        vars = _extends({}, vars, objectToVars(name, value));
      } else {
        vars[toVarName(name)] = value;
      }
    }

    return vars;
  }; // create root styles for color modes

  var createColorStyles = function createColorStyles(theme) {
    var _css2;

    if (theme === void 0) {
      theme = {};
    }

    var use = css.__internalGetUseRootStyles(theme);

    if (!theme.colors || use.rootStyles === false) return {};

    if (theme.useCustomProperties === false || !theme.colors.modes) {
      var _css;

      return css.css((_css = {}, _css[use.scope] = {
        color: 'text',
        bg: 'background'
      }, _css))(theme);
    }

    var _theme = theme,
        colors = _theme.colors,
        initialColorModeName = _theme.initialColorModeName,
        printColorModeName = _theme.printColorModeName;
    var modes = colors.modes || {};
    var styles = objectToVars('colors', colors);
    Object.keys(modes).forEach(function (mode) {
      var key = "&.theme-ui-" + mode;
      styles[key] = objectToVars('colors', modes[mode]);
    });

    if (printColorModeName) {
      var mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];
      styles['@media print'] = objectToVars('colors', mode);
    }

    var colorToVarValue = function colorToVarValue(color) {
      return toVarValue("colors-" + color, css.get(theme, "colors." + color));
    };

    return css.css((_css2 = {}, _css2[use.scope] = _extends({}, styles, {
      color: colorToVarValue('text'),
      bg: colorToVarValue('background')
    }), _css2))(theme);
  };

  var STORAGE_KEY = 'theme-ui-color-mode';
  var storage = {
    get: function get(init) {
      try {
        return window.localStorage.getItem(STORAGE_KEY) || init;
      } catch (e) {
        console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);
      }
    },
    set: function set(value) {
      try {
        window.localStorage.setItem(STORAGE_KEY, value);
      } catch (e) {
        console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);
      }
    }
  };

  var getPreferredColorScheme = function getPreferredColorScheme() {
    if (typeof window !== 'undefined' && window.matchMedia) {
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }

      if (window.matchMedia('(prefers-color-scheme: light)').matches) {
        return 'light';
      }
    }

    return null;
  };

  var useColorModeState = function useColorModeState(theme) {
    if (theme === void 0) {
      theme = {};
    }

    var _React$useState = React__default['default'].useState(function () {
      var preferredMode = theme.useColorSchemeMediaQuery !== false && getPreferredColorScheme();
      return preferredMode || theme.initialColorModeName || 'default';
    }),
        mode = _React$useState[0],
        setMode = _React$useState[1]; // read color mode from local storage


    React__default['default'].useEffect(function () {
      var stored = theme.useLocalStorage !== false && storage.get();
      document.documentElement.classList.remove('theme-ui-' + stored);
      document.body.classList.remove('theme-ui-' + stored);

      if (stored && stored !== mode) {
        setMode(stored);
      }
    }, []);
    React__default['default'].useEffect(function () {
      if (mode && theme.useLocalStorage !== false) {
        storage.set(mode);
      }
    }, [mode]);

    if (process.env.NODE_ENV !== 'production') {
      if (theme.colors && theme.colors.modes && theme.initialColorModeName && Object.keys(theme.colors.modes).indexOf(theme.initialColorModeName) > -1) {
        console.warn('The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');
      }
    }

    return [mode, setMode];
  };

  function useColorMode() {
    var _useThemeUI = core.useThemeUI(),
        colorMode = _useThemeUI.colorMode,
        setColorMode = _useThemeUI.setColorMode;

    if (typeof setColorMode !== 'function') {
      throw new Error("[useColorMode] requires the ColorModeProvider component");
    } // We're allowing the user to specify a narrower type for its color mode name.


    return [colorMode, setColorMode];
  }

  var applyColorMode = function applyColorMode(theme, mode) {
    if (!mode) return theme;
    var modes = css.get(theme, 'colors.modes', {});
    return core.merge.all({}, theme, {
      colors: css.get(modes, mode, {})
    });
  };

  var BodyStyles = function BodyStyles(_ref) {
    var theme = _ref.theme;
    return core.jsx(react.Global, {
      styles: function styles() {
        return createColorStyles(theme);
      }
    });
  };

  var ColorModeProvider = function ColorModeProvider(_ref2) {
    var children = _ref2.children;
    var outer = core.useThemeUI();

    var _useColorModeState = useColorModeState(outer.theme),
        colorMode = _useColorModeState[0],
        setColorMode = _useColorModeState[1];

    var theme = applyColorMode(outer.theme || {}, colorMode);

    var emotionTheme = _extends({}, theme);

    if (theme.useCustomProperties !== false) {
      emotionTheme.colors = toCustomProperties(emotionTheme.colors, 'colors');
    }

    var context = _extends({}, outer, {
      theme: theme,
      colorMode: colorMode,
      setColorMode: setColorMode
    });

    return core.jsx(react.ThemeContext.Provider, {
      value: emotionTheme
    }, core.jsx(core.Context.Provider, {
      value: context
    }, core.jsx(BodyStyles, {
      key: 'color-mode',
      theme: theme
    }), children));
  };
  var noflash = "(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n  document.body.classList.add('theme-ui-' + mode);\n} catch (e) {} })();";
  var InitializeColorMode = function InitializeColorMode() {
    return core.jsx('script', {
      key: 'theme-ui-no-flash',
      dangerouslySetInnerHTML: {
        __html: noflash
      }
    });
  };

  exports.ColorModeProvider = ColorModeProvider;
  exports.InitializeColorMode = InitializeColorMode;
  exports.useColorMode = useColorMode;

})));
//# sourceMappingURL=index.umd.js.map
