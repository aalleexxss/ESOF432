(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@theme-ui/core'), require('@theme-ui/css'), require('@theme-ui/color-modes'), require('@theme-ui/mdx'), require('@emotion/react')) :
  typeof define === 'function' && define.amd ? define(['exports', '@theme-ui/core', '@theme-ui/css', '@theme-ui/color-modes', '@theme-ui/mdx', '@emotion/react'], factory) :
  (global = global || self, factory(global.themeProvider = {}, global.core, global.css, global.colorModes, global.mdx, global.react));
}(this, (function (exports, core, css, colorModes, mdx, react) {
  var RootStyles = function RootStyles() {
    return core.jsx(react.Global, {
      styles: function styles(emotionTheme) {
        var _css;

        var theme = emotionTheme;

        var use = core.__internalGetUseRootStyles(theme);

        if (use.rootStyles === false || theme.styles && !theme.styles.root) {
          return false;
        }

        var boxSizing = theme.useBorderBox === false ? undefined : 'border-box';
        return css.css((_css = {
          '*': {
            boxSizing: boxSizing
          }
        }, _css[use.scope] = {
          margin: 0,
          variant: 'styles.root'
        }, _css))(theme);
      }
    });
  };

  var ThemeProvider = function ThemeProvider(_ref) {
    var theme = _ref.theme,
        components = _ref.components,
        children = _ref.children;
    var outer = core.useThemeUI();

    if (typeof outer.setColorMode === 'function') {
      return core.jsx(core.ThemeProvider, {
        theme: theme
      }, core.jsx(mdx.MDXProvider, {
        components: components,
        children: children
      }));
    }

    return core.jsx(core.ThemeProvider, {
      theme: theme
    }, core.jsx(colorModes.ColorModeProvider, null, core.jsx(RootStyles), core.jsx(mdx.MDXProvider, {
      components: components,
      children: children
    })));
  };

  exports.ThemeProvider = ThemeProvider;

})));
//# sourceMappingURL=index.umd.js.map
