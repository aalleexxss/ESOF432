import { useThemeUI, jsx, ThemeProvider as ThemeProvider$1, __internalGetUseRootStyles } from '@theme-ui/core';
import { css } from '@theme-ui/css';
import { ColorModeProvider } from '@theme-ui/color-modes';
import { MDXProvider } from '@theme-ui/mdx';
import { Global } from '@emotion/react';

var RootStyles = function RootStyles() {
  return jsx(Global, {
    styles: function styles(emotionTheme) {
      var _css;

      var theme = emotionTheme;

      var use = __internalGetUseRootStyles(theme);

      if (use.rootStyles === false || theme.styles && !theme.styles.root) {
        return false;
      }

      var boxSizing = theme.useBorderBox === false ? undefined : 'border-box';
      return css((_css = {
        '*': {
          boxSizing: boxSizing
        }
      }, _css[use.scope] = {
        margin: 0,
        variant: 'styles.root'
      }, _css))(theme);
    }
  });
};

var ThemeProvider = function ThemeProvider(_ref) {
  var theme = _ref.theme,
      components = _ref.components,
      children = _ref.children;
  var outer = useThemeUI();

  if (typeof outer.setColorMode === 'function') {
    return jsx(ThemeProvider$1, {
      theme: theme
    }, jsx(MDXProvider, {
      components: components,
      children: children
    }));
  }

  return jsx(ThemeProvider$1, {
    theme: theme
  }, jsx(ColorModeProvider, null, jsx(RootStyles), jsx(MDXProvider, {
    components: components,
    children: children
  })));
};

export { ThemeProvider };
//# sourceMappingURL=index.esm.js.map
