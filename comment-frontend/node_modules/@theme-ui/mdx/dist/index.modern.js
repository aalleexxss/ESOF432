import { jsx } from '@theme-ui/core';
import { css, get } from '@theme-ui/css';
import styled from '@emotion/styled';
import { useMDXComponents, MDXProvider as MDXProvider$1 } from '@mdx-js/react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

const tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx
'inlineCode', 'thematicBreak', // other
'div', // theme-ui
'root'];
const aliases = {
  inlineCode: 'code',
  thematicBreak: 'hr',
  root: 'div'
};

const isAlias = x => x in aliases;

const alias = n => isAlias(n) ? aliases[n] : n;

const propOverrides = {
  th: {
    align: 'textAlign'
  },
  td: {
    align: 'textAlign'
  }
};
const themed = key => (_ref) => {
  let {
    theme
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["theme"]);

  const propsStyle = propOverrides[key];
  const extraStyles = propsStyle ? Object.keys(rest).filter(prop => propsStyle[prop] !== undefined).reduce((acc, prop) => _extends({}, acc, {
    [propsStyle[prop]]: rest[prop]
  }), {}) : undefined;
  return css(_extends({}, get(theme, `styles.${key}`), extraStyles))(theme);
};
const Themed = styled('div')(themed('div'));
const components = {};
tags.forEach(tag => {
  // fixme?
  components[tag] = styled(alias(tag))(themed(tag));
  Themed[tag] = components[tag];
});

const createComponents = comps => {
  const next = _extends({}, components);

  const componentKeys = Object.keys(comps);
  componentKeys.forEach(key => {
    next[key] = styled(comps[key])(themed(key));
  });
  return next;
};

const MDXProvider = ({
  components,
  children
}) => {
  const outer = useMDXComponents();
  return jsx(MDXProvider$1, {
    components: createComponents(_extends({}, outer, components)),
    children
  });
};

export { MDXProvider, Themed, components, themed };
//# sourceMappingURL=index.modern.js.map
