{"ast":null,"code":"import { jsx } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport styled from '@emotion/styled';\nimport { useMDXComponents, MDXProvider as MDXProvider$1 } from '@mdx-js/react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx\n'inlineCode', 'thematicBreak', // other\n'div', // theme-ui\n'root'];\nvar aliases = {\n  inlineCode: 'code',\n  thematicBreak: 'hr',\n  root: 'div'\n};\n\nvar isAlias = function isAlias(x) {\n  return x in aliases;\n};\n\nvar alias = function alias(n) {\n  return isAlias(n) ? aliases[n] : n;\n};\n\nvar propOverrides = {\n  th: {\n    align: 'textAlign'\n  },\n  td: {\n    align: 'textAlign'\n  }\n};\n\nvar themed = function themed(key) {\n  return function (_ref) {\n    var theme = _ref.theme,\n        rest = _objectWithoutPropertiesLoose(_ref, [\"theme\"]);\n\n    var propsStyle = propOverrides[key];\n    var extraStyles = propsStyle ? Object.keys(rest).filter(function (prop) {\n      return propsStyle[prop] !== undefined;\n    }).reduce(function (acc, prop) {\n      var _extends2;\n\n      return _extends({}, acc, (_extends2 = {}, _extends2[propsStyle[prop]] = rest[prop], _extends2));\n    }, {}) : undefined;\n    return css(_extends({}, get(theme, \"styles.\" + key), extraStyles))(theme);\n  };\n};\n\nvar Themed = styled('div')(themed('div'));\nvar components = {};\ntags.forEach(function (tag) {\n  // fixme?\n  components[tag] = styled(alias(tag))(themed(tag));\n  Themed[tag] = components[tag];\n});\n\nvar createComponents = function createComponents(comps) {\n  var next = _extends({}, components);\n\n  var componentKeys = Object.keys(comps);\n  componentKeys.forEach(function (key) {\n    next[key] = styled(comps[key])(themed(key));\n  });\n  return next;\n};\n\nvar MDXProvider = function MDXProvider(_ref2) {\n  var components = _ref2.components,\n      children = _ref2.children;\n  var outer = useMDXComponents();\n  return jsx(MDXProvider$1, {\n    components: createComponents(_extends({}, outer, components)),\n    children: children\n  });\n};\n\nexport { MDXProvider, Themed, components, themed };","map":{"version":3,"sources":["../src/index.ts"],"names":["tags","aliases","inlineCode","thematicBreak","root","isAlias","x","alias","propOverrides","th","align","td","themed","theme","rest","propsStyle","extraStyles","css","get","Themed","styled","components","createComponents","next","componentKeys","Object","comps","MDXProvider","children","outer","useMDXComponents","jsx"],"mappings":"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","sourcesContent":["import { jsx, IntrinsicSxElements } from '@theme-ui/core'\nimport { css, get, Theme } from '@theme-ui/css'\nimport {\n  ComponentType,\n  FC,\n  ReactNode,\n  DetailedHTMLProps,\n  HTMLAttributes,\n  ElementType,\n  ComponentProps,\n} from 'react'\nimport styled, { StyledComponent } from '@emotion/styled'\nimport { MDXProvider as _MDXProvider, useMDXComponents } from '@mdx-js/react'\n\ntype MDXProviderComponentsKnownKeys = {\n  [key in keyof IntrinsicSxElements]?: ComponentType<any> | string\n}\nexport interface MDXProviderComponents extends MDXProviderComponentsKnownKeys {\n  [key: string]: ComponentType<any> | string | undefined\n}\nexport type MdxAliases = {\n  [key in keyof IntrinsicSxElements]: keyof JSX.IntrinsicElements\n}\n\nexport type MdxAliasesKeys = 'inlineCode' | 'thematicBreak' | 'root'\n\nexport type ThemedProps = {\n  theme: Theme\n}\n\nexport interface MdxProviderProps {\n  components?: MDXProviderComponents\n  children: ReactNode\n}\n\n// mdx components\nconst tags: Array<keyof IntrinsicSxElements> = [\n  'p',\n  'b',\n  'i',\n  'a',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'img',\n  'pre',\n  'code',\n  'ol',\n  'ul',\n  'li',\n  'blockquote',\n  'hr',\n  'em',\n  'table',\n  'tr',\n  'th',\n  'td',\n  'em',\n  'strong',\n  'del',\n  // mdx\n  'inlineCode',\n  'thematicBreak',\n  // other\n  'div',\n  // theme-ui\n  'root',\n]\n\nconst aliases = {\n  inlineCode: 'code',\n  thematicBreak: 'hr',\n  root: 'div',\n} as const\n\ntype Aliases = typeof aliases\nconst isAlias = (x: string): x is keyof Aliases => x in aliases\n\nexport type ThemedComponentName =\n  | keyof IntrinsicSxElements\n  | keyof JSX.IntrinsicElements\n\nconst alias = (n: ThemedComponentName): keyof JSX.IntrinsicElements =>\n  isAlias(n) ? aliases[n] : n\n\nconst propOverrides: {\n  [key in Partial<ThemedComponentName>]?: Record<string, string>\n} = {\n  th: {\n    align: 'textAlign',\n  },\n  td: {\n    align: 'textAlign',\n  },\n}\nexport const themed = (key: ThemedComponentName) => ({\n  theme,\n  ...rest\n}: ThemedProps) => {\n  const propsStyle = propOverrides[key]\n\n  const extraStyles = propsStyle\n    ? Object.keys(rest)\n        .filter((prop) => propsStyle[prop] !== undefined)\n        .reduce(\n          (acc, prop) => ({\n            ...acc,\n            [propsStyle[prop]]: (rest as Record<string, string>)[prop],\n          }),\n          {}\n        )\n    : undefined\n  return css({ ...get(theme, `styles.${key}`), ...extraStyles })(theme)\n}\n\n// opt out of typechecking whenever `as` prop is used\ninterface AnyComponentProps extends JSX.IntrinsicAttributes {\n  [key: string]: unknown\n}\n\nexport type WithPoorAsProp<\n  Props,\n  As extends ElementType | undefined = undefined\n> = {\n  as?: As\n} & (undefined extends As\n  ? As extends undefined\n    ? Props\n    : AnyComponentProps\n  : AnyComponentProps)\n\nexport interface ThemedComponent<Name extends ElementType> {\n  <As extends ElementType | undefined = undefined>(\n    props: WithPoorAsProp<ComponentProps<Name>, As>\n  ): JSX.Element\n}\n\nexport type ThemedComponentsDict = {\n  [K in keyof IntrinsicSxElements]: K extends keyof Aliases\n    ? ThemedComponent<Aliases[K]>\n    : K extends keyof JSX.IntrinsicElements\n    ? ThemedComponent<K>\n    : never\n}\n\ntype ThemedDiv = StyledComponent<\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\n  ThemedProps,\n  Theme\n>\n\nexport const Themed: ThemedDiv & ThemedComponentsDict = styled('div')(\n  themed('div')\n) as ThemedDiv & ThemedComponentsDict\n\nexport const components = {} as ThemedComponentsDict\n\ntags.forEach((tag) => {\n  // fixme?\n  components[tag] = styled(alias(tag))(themed(tag)) as any\n  Themed[tag] = components[tag] as any\n})\n\nconst createComponents = (comps: MDXProviderComponents) => {\n  const next = { ...components }\n\n  const componentKeys = Object.keys(comps) as Array<keyof IntrinsicSxElements>\n\n  componentKeys.forEach((key) => {\n    ;(next[key] as ThemedComponentsDict[typeof key]) = styled<any>(comps[key])(\n      themed(key)\n    ) as ThemedComponentsDict[typeof key]\n  })\n  return next\n}\n\nexport const MDXProvider: FC<MdxProviderProps> = ({ components, children }) => {\n  const outer = useMDXComponents() as MDXProviderComponents\n\n  return jsx(_MDXProvider, {\n    components: createComponents({ ...outer, ...components }),\n    children,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}