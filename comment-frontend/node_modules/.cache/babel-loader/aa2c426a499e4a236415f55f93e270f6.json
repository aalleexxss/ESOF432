{"ast":null,"code":"import React from 'react';\nimport { useThemeUI, jsx, Context, merge } from '@theme-ui/core';\nimport { __internalGetUseRootStyles, css, get } from '@theme-ui/css';\nimport { ThemeContext, Global } from '@emotion/react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar stripKeyDefault = function stripKeyDefault(key) {\n  return key.replace('-__default', '');\n};\n\nvar toVarName = function toVarName(key) {\n  return \"--theme-ui-\" + stripKeyDefault(key);\n};\n\nvar toVarValue = function toVarValue(key, value) {\n  return \"var(\" + toVarName(key) + \", \" + value + \")\";\n};\n\nvar join = function join() {\n  return [].slice.call(arguments).filter(Boolean).join('-');\n};\n\nvar numberScales = {\n  fontWeights: true,\n  lineHeights: true\n};\nvar reservedKeys = {\n  useCustomProperties: true,\n  initialColorModeName: true,\n  printColorModeName: true,\n  initialColorMode: true,\n  useLocalStorage: true\n};\n\nvar toPixel = function toPixel(key, value) {\n  if (typeof value !== 'number') return value;\n  if (numberScales[key]) return value;\n  return value + 'px';\n}; // convert theme values to custom properties\n\n\nvar toCustomProperties = function toCustomProperties(obj, parent, themeKey) {\n  var next = Array.isArray(obj) ? [] : {};\n\n  for (var key in obj) {\n    var value = obj[key];\n    var name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name, key);\n      continue;\n    }\n\n    if (reservedKeys[key]) {\n      next[key] = value;\n      continue;\n    }\n\n    var val = toPixel(themeKey || key, value);\n    next[key] = toVarValue(name, val);\n  }\n\n  return next;\n};\n\nvar objectToVars = function objectToVars(parent, obj) {\n  var vars = {};\n\n  for (var key in obj) {\n    if (key === 'modes') continue;\n    var name = join(parent, key);\n    var value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = _extends({}, vars, objectToVars(name, value));\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n}; // create root styles for color modes\n\n\nvar createColorStyles = function createColorStyles(theme) {\n  var _css2;\n\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  var use = __internalGetUseRootStyles(theme);\n\n  if (!theme.colors || use.rootStyles === false) return {};\n\n  if (theme.useCustomProperties === false || !theme.colors.modes) {\n    var _css;\n\n    return css((_css = {}, _css[use.scope] = {\n      color: 'text',\n      bg: 'background'\n    }, _css))(theme);\n  }\n\n  var _theme = theme,\n      colors = _theme.colors,\n      initialColorModeName = _theme.initialColorModeName,\n      printColorModeName = _theme.printColorModeName;\n  var modes = colors.modes || {};\n  var styles = objectToVars('colors', colors);\n  Object.keys(modes).forEach(function (mode) {\n    var key = \"&.theme-ui-\" + mode;\n    styles[key] = objectToVars('colors', modes[mode]);\n  });\n\n  if (printColorModeName) {\n    var mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = objectToVars('colors', mode);\n  }\n\n  var colorToVarValue = function colorToVarValue(color) {\n    return toVarValue(\"colors-\" + color, get(theme, \"colors.\" + color));\n  };\n\n  return css((_css2 = {}, _css2[use.scope] = _extends({}, styles, {\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  }), _css2))(theme);\n};\n\nvar STORAGE_KEY = 'theme-ui-color-mode';\nvar storage = {\n  get: function get(init) {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY) || init;\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  },\n  set: function set(value) {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (e) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);\n    }\n  }\n};\n\nvar getPreferredColorScheme = function getPreferredColorScheme() {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    if (window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light';\n    }\n  }\n\n  return null;\n};\n\nvar useColorModeState = function useColorModeState(theme) {\n  if (theme === void 0) {\n    theme = {};\n  }\n\n  var _React$useState = React.useState(function () {\n    var preferredMode = theme.useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || theme.initialColorModeName || 'default';\n  }),\n      mode = _React$useState[0],\n      setMode = _React$useState[1]; // read color mode from local storage\n\n\n  React.useEffect(function () {\n    var stored = theme.useLocalStorage !== false && storage.get();\n    document.documentElement.classList.remove('theme-ui-' + stored);\n    document.body.classList.remove('theme-ui-' + stored);\n\n    if (stored && stored !== mode) {\n      setMode(stored);\n    }\n  }, []);\n  React.useEffect(function () {\n    if (mode && theme.useLocalStorage !== false) {\n      storage.set(mode);\n    }\n  }, [mode]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (theme.colors && theme.colors.modes && theme.initialColorModeName && Object.keys(theme.colors.modes).indexOf(theme.initialColorModeName) > -1) {\n      console.warn('The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  return [mode, setMode];\n};\n\nfunction useColorMode() {\n  var _useThemeUI = useThemeUI(),\n      colorMode = _useThemeUI.colorMode,\n      setColorMode = _useThemeUI.setColorMode;\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(\"[useColorMode] requires the ColorModeProvider component\");\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n\n  return [colorMode, setColorMode];\n}\n\nvar applyColorMode = function applyColorMode(theme, mode) {\n  if (!mode) return theme;\n  var modes = get(theme, 'colors.modes', {});\n  return merge.all({}, theme, {\n    colors: get(modes, mode, {})\n  });\n};\n\nvar BodyStyles = function BodyStyles(_ref) {\n  var theme = _ref.theme;\n  return jsx(Global, {\n    styles: function styles() {\n      return createColorStyles(theme);\n    }\n  });\n};\n\nvar ColorModeProvider = function ColorModeProvider(_ref2) {\n  var children = _ref2.children;\n  var outer = useThemeUI();\n\n  var _useColorModeState = useColorModeState(outer.theme),\n      colorMode = _useColorModeState[0],\n      setColorMode = _useColorModeState[1];\n\n  var theme = applyColorMode(outer.theme || {}, colorMode);\n\n  var emotionTheme = _extends({}, theme);\n\n  if (theme.useCustomProperties !== false) {\n    emotionTheme.colors = toCustomProperties(emotionTheme.colors, 'colors');\n  }\n\n  var context = _extends({}, outer, {\n    theme: theme,\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  });\n\n  return jsx(ThemeContext.Provider, {\n    value: emotionTheme\n  }, jsx(Context.Provider, {\n    value: context\n  }, jsx(BodyStyles, {\n    key: 'color-mode',\n    theme: theme\n  }), children));\n};\n\nvar noflash = \"(function() { try {\\n  var mode = localStorage.getItem('theme-ui-color-mode');\\n  if (!mode) return\\n  document.documentElement.classList.add('theme-ui-' + mode);\\n  document.body.classList.add('theme-ui-' + mode);\\n} catch (e) {} })();\";\n\nvar InitializeColorMode = function InitializeColorMode() {\n  return jsx('script', {\n    key: 'theme-ui-no-flash',\n    dangerouslySetInnerHTML: {\n      __html: noflash\n    }\n  });\n};\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };","map":{"version":3,"sources":["../src/custom-properties.ts","../src/index.tsx"],"names":["stripKeyDefault","key","toVarName","toVarValue","join","numberScales","fontWeights","lineHeights","reservedKeys","useCustomProperties","initialColorModeName","printColorModeName","initialColorMode","useLocalStorage","toPixel","value","toCustomProperties","next","Array","obj","name","val","themeKey","objectToVars","vars","createColorStyles","theme","use","__internalGetUseRootStyles","css","color","bg","colors","modes","styles","Object","mode","colorToVarValue","get","STORAGE_KEY","storage","window","console","set","getPreferredColorScheme","useColorModeState","setMode","preferredMode","React","stored","document","process","useColorMode","colorMode","setColorMode","useThemeUI","applyColorMode","BodyStyles","jsx","ColorModeProvider","children","outer","emotionTheme","context","EmotionContext","Context","noflash","InitializeColorMode","dangerouslySetInnerHTML","__html"],"mappings":"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","sourcesContent":["import { css, get, Theme, __internalGetUseRootStyles } from '@theme-ui/css'\n\nconst stripKeyDefault = (key: string) => key.replace('-__default', '')\nconst toVarName = (key: string) => `--theme-ui-${stripKeyDefault(key)}`\nconst toVarValue = (key: string, value: string | number) =>\n  `var(${toVarName(key)}, ${value})`\n\nconst join = (...args: (string | undefined)[]) => args.filter(Boolean).join('-')\n\nconst numberScales = {\n  fontWeights: true,\n  lineHeights: true,\n}\nconst reservedKeys = {\n  useCustomProperties: true,\n  initialColorModeName: true,\n  printColorModeName: true,\n  initialColorMode: true,\n  useLocalStorage: true,\n}\n\nconst toPixel = (key: string, value: string | number) => {\n  if (typeof value !== 'number') return value\n  if (numberScales[key as keyof typeof numberScales]) return value\n  return value + 'px'\n}\n\n// convert theme values to custom properties\nexport const toCustomProperties = (\n  obj: Record<string, any> | undefined,\n  parent?: string,\n  themeKey?: string\n) => {\n  const next: Record<string, any> = Array.isArray(obj) ? [] : {}\n\n  for (let key in obj) {\n    const value = obj[key]\n    const name = join(parent, key)\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name, key)\n      continue\n    }\n    if (reservedKeys[key as keyof typeof reservedKeys]) {\n      next[key] = value\n      continue\n    }\n    const val = toPixel(themeKey || key, value)\n    next[key] = toVarValue(name, val)\n  }\n\n  return next\n}\n\nexport const objectToVars = (parent: string, obj: Record<string, any>) => {\n  let vars: Record<string, object> = {}\n  for (let key in obj) {\n    if (key === 'modes') continue\n    const name = join(parent, key)\n    const value = obj[key]\n    if (value && typeof value === 'object') {\n      vars = {\n        ...vars,\n        ...objectToVars(name, value),\n      }\n    } else {\n      vars[toVarName(name)] = value\n    }\n  }\n  return vars\n}\n\n// create root styles for color modes\nexport const createColorStyles = (theme: Theme = {}) => {\n  const use = __internalGetUseRootStyles(theme)\n  if (!theme.colors || use.rootStyles === false) return {}\n  if (theme.useCustomProperties === false || !theme.colors.modes) {\n    return css({\n      [use.scope]: {\n        color: 'text',\n        bg: 'background',\n      },\n    })(theme)\n  }\n  const { colors, initialColorModeName, printColorModeName } = theme\n  const modes = colors.modes || {}\n  const styles = objectToVars('colors', colors)\n\n  Object.keys(modes).forEach((mode) => {\n    const key = `&.theme-ui-${mode}`\n    styles[key] = objectToVars('colors', modes[mode])\n  })\n  if (printColorModeName) {\n    const mode =\n      printColorModeName === 'initial' ||\n      printColorModeName === initialColorModeName\n        ? colors\n        : modes[printColorModeName]\n    styles['@media print'] = objectToVars('colors', mode)\n  }\n  const colorToVarValue = (color: string) =>\n    toVarValue(`colors-${color}`, get(theme, `colors.${color}`))\n\n  return css({\n    [use.scope]: {\n      ...styles,\n      color: colorToVarValue('text'),\n      bg: colorToVarValue('background'),\n    },\n  })(theme)\n}\n","import React, { Dispatch, SetStateAction } from 'react'\nimport { jsx, useThemeUI, merge, Context } from '@theme-ui/core'\nimport { get, Theme } from '@theme-ui/css'\nimport { Global, ThemeContext as EmotionContext } from '@emotion/react'\nimport { toCustomProperties, createColorStyles } from './custom-properties'\n\nconst STORAGE_KEY = 'theme-ui-color-mode'\n\ndeclare module '@theme-ui/core' {\n  export interface ContextValue {\n    colorMode?: string\n    setColorMode?: (colorMode: SetStateAction<string>) => void\n  }\n}\n\nconst storage = {\n  get: (init?: string) => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY) || init\n    } catch (e) {\n      console.warn(\n        'localStorage is disabled and color mode might not work as expected.',\n        'Please check your Site Settings.',\n        e\n      )\n    }\n  },\n  set: (value: string) => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value)\n    } catch (e) {\n      console.warn(\n        'localStorage is disabled and color mode might not work as expected.',\n        'Please check your Site Settings.',\n        e\n      )\n    }\n  },\n}\n\nconst getPreferredColorScheme = (): 'dark' | 'light' | null => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark'\n    }\n    if (window.matchMedia('(prefers-color-scheme: light)').matches) {\n      return 'light'\n    }\n  }\n  return null\n}\n\nconst useColorModeState = (theme: Theme = {}) => {\n  const [mode, setMode] = React.useState(() => {\n    const preferredMode =\n      theme.useColorSchemeMediaQuery !== false && getPreferredColorScheme()\n\n    return preferredMode || theme.initialColorModeName || 'default'\n  })\n\n  // read color mode from local storage\n  React.useEffect(() => {\n    const stored = theme.useLocalStorage !== false && storage.get()\n    document.documentElement.classList.remove('theme-ui-' + stored)\n    document.body.classList.remove('theme-ui-' + stored)\n\n    if (stored && stored !== mode) {\n      setMode(stored)\n    }\n  }, [])\n\n  React.useEffect(() => {\n    if (mode && theme.useLocalStorage !== false) {\n      storage.set(mode)\n    }\n  }, [mode])\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (\n      theme.colors &&\n      theme.colors.modes &&\n      theme.initialColorModeName &&\n      Object.keys(theme.colors.modes).indexOf(theme.initialColorModeName) > -1\n    ) {\n      console.warn(\n        'The `initialColorModeName` value should be a unique name' +\n          ' and cannot reference a key in `theme.colors.modes`.'\n      )\n    }\n  }\n\n  return [mode, setMode] as const\n}\n\nexport function useColorMode<T extends string = string>(): [\n  T,\n  Dispatch<SetStateAction<T>>\n] {\n  const { colorMode, setColorMode } = useThemeUI()\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`)\n  }\n\n  // We're allowing the user to specify a narrower type for its color mode name.\n  return ([colorMode, setColorMode] as unknown) as [\n    T,\n    Dispatch<SetStateAction<T>>\n  ]\n}\n\nconst applyColorMode = (theme: Theme, mode: string): Theme => {\n  if (!mode) return theme\n  const modes = get(theme, 'colors.modes', {})\n  return merge.all({}, theme, {\n    colors: get(modes, mode, {}),\n  })\n}\n\nconst BodyStyles = ({ theme }: { theme: Theme }) =>\n  jsx(Global, {\n    styles: () => {\n      return createColorStyles(theme)\n    },\n  })\n\nexport const ColorModeProvider: React.FC = ({ children }) => {\n  const outer = useThemeUI()\n  const [colorMode, setColorMode] = useColorModeState(outer.theme)\n  const theme = applyColorMode(outer.theme || {}, colorMode)\n  const emotionTheme = { ...theme }\n\n  if (theme.useCustomProperties !== false) {\n    emotionTheme.colors = toCustomProperties(emotionTheme.colors, 'colors')\n  }\n\n  const context = {\n    ...outer,\n    theme,\n    colorMode,\n    setColorMode,\n  }\n\n  return jsx(\n    EmotionContext.Provider,\n    { value: emotionTheme },\n    jsx(\n      Context.Provider,\n      { value: context },\n      jsx(BodyStyles, { key: 'color-mode', theme }),\n      children\n    )\n  )\n}\n\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n  document.body.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`\n\nexport const InitializeColorMode = () =>\n  jsx('script', {\n    key: 'theme-ui-no-flash',\n    dangerouslySetInnerHTML: {\n      __html: noflash,\n    },\n  })\n"]},"metadata":{},"sourceType":"module"}