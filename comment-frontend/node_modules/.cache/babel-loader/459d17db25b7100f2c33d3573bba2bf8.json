{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _toConsumableArray = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar anyMap = new WeakMap();\nvar eventsMap = new WeakMap();\nvar producersMap = new WeakMap();\nvar anyProducer = Symbol('anyProducer');\nvar resolvedPromise = Promise.resolve();\nvar listenerAdded = Symbol('listenerAdded');\nvar listenerRemoved = Symbol('listenerRemoved');\n\nfunction assertEventName(eventName) {\n  if (typeof eventName !== 'string' && typeof eventName !== 'symbol') {\n    throw new TypeError('eventName must be a string or a symbol');\n  }\n}\n\nfunction assertListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('listener must be a function');\n  }\n}\n\nfunction getListeners(instance, eventName) {\n  var events = eventsMap.get(instance);\n\n  if (!events.has(eventName)) {\n    events.set(eventName, new Set());\n  }\n\n  return events.get(eventName);\n}\n\nfunction getEventProducers(instance, eventName) {\n  var key = typeof eventName === 'string' || typeof eventName === 'symbol' ? eventName : anyProducer;\n  var producers = producersMap.get(instance);\n\n  if (!producers.has(key)) {\n    producers.set(key, new Set());\n  }\n\n  return producers.get(key);\n}\n\nfunction enqueueProducers(instance, eventName, eventData) {\n  var producers = producersMap.get(instance);\n\n  if (producers.has(eventName)) {\n    var _iterator = _createForOfIteratorHelper(producers.get(eventName)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var producer = _step.value;\n        producer.enqueue(eventData);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (producers.has(anyProducer)) {\n    var item = Promise.all([eventName, eventData]);\n\n    var _iterator2 = _createForOfIteratorHelper(producers.get(anyProducer)),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _producer = _step2.value;\n\n        _producer.enqueue(item);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}\n\nfunction iterator(instance, eventNames) {\n  eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n  var isFinished = false;\n\n  var flush = function flush() {};\n\n  var queue = [];\n  var producer = {\n    enqueue: function enqueue(item) {\n      queue.push(item);\n      flush();\n    },\n    finish: function finish() {\n      isFinished = true;\n      flush();\n    }\n  };\n\n  var _iterator3 = _createForOfIteratorHelper(eventNames),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var eventName = _step3.value;\n      getEventProducers(instance, eventName).add(producer);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return {\n    next: function next() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (queue) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  done: true\n                });\n\n              case 2:\n                if (!(queue.length === 0)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                if (!isFinished) {\n                  _context.next = 6;\n                  break;\n                }\n\n                queue = undefined;\n                return _context.abrupt(\"return\", _this.next());\n\n              case 6:\n                _context.next = 8;\n                return new Promise(function (resolve) {\n                  flush = resolve;\n                });\n\n              case 8:\n                return _context.abrupt(\"return\", _this.next());\n\n              case 9:\n                _context.next = 11;\n                return queue.shift();\n\n              case 11:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", {\n                  done: false,\n                  value: _context.t0\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    return: function _return(value) {\n      var _arguments = arguments;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _iterator4, _step4, eventName;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                queue = undefined;\n                _iterator4 = _createForOfIteratorHelper(eventNames);\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    eventName = _step4.value;\n                    getEventProducers(instance, eventName).delete(producer);\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                flush();\n\n                if (!(_arguments.length > 0)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 7;\n                return value;\n\n              case 7:\n                _context2.t1 = _context2.sent;\n                _context2.t0 = {\n                  done: true,\n                  value: _context2.t1\n                };\n                _context2.next = 12;\n                break;\n\n              case 11:\n                _context2.t0 = {\n                  done: true\n                };\n\n              case 12:\n                return _context2.abrupt(\"return\", _context2.t0);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    [Symbol.asyncIterator]: function () {\n      return this;\n    }\n  };\n}\n\nfunction defaultMethodNamesOrAssert(methodNames) {\n  if (methodNames === undefined) {\n    return allEmitteryMethods;\n  }\n\n  if (!Array.isArray(methodNames)) {\n    throw new TypeError('`methodNames` must be an array of strings');\n  }\n\n  var _iterator5 = _createForOfIteratorHelper(methodNames),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var methodName = _step5.value;\n\n      if (!allEmitteryMethods.includes(methodName)) {\n        if (typeof methodName !== 'string') {\n          throw new TypeError('`methodNames` element must be a string');\n        }\n\n        throw new Error(\"\".concat(methodName, \" is not Emittery method\"));\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return methodNames;\n}\n\nvar isListenerSymbol = function isListenerSymbol(symbol) {\n  return symbol === listenerAdded || symbol === listenerRemoved;\n};\n\nvar Emittery = /*#__PURE__*/function () {\n  function Emittery() {\n    _classCallCheck(this, Emittery);\n\n    anyMap.set(this, new Set());\n    eventsMap.set(this, new Map());\n    producersMap.set(this, new Map());\n  }\n\n  _createClass(Emittery, [{\n    key: \"on\",\n    value: function on(eventNames, listener) {\n      assertListener(listener);\n      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n      var _iterator6 = _createForOfIteratorHelper(eventNames),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var eventName = _step6.value;\n          assertEventName(eventName);\n          getListeners(this, eventName).add(listener);\n\n          if (!isListenerSymbol(eventName)) {\n            this.emit(listenerAdded, {\n              eventName: eventName,\n              listener: listener\n            });\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return this.off.bind(this, eventNames, listener);\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventNames, listener) {\n      assertListener(listener);\n      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n      var _iterator7 = _createForOfIteratorHelper(eventNames),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var eventName = _step7.value;\n          assertEventName(eventName);\n          getListeners(this, eventName).delete(listener);\n\n          if (!isListenerSymbol(eventName)) {\n            this.emit(listenerRemoved, {\n              eventName: eventName,\n              listener: listener\n            });\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventNames) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        var off = _this2.on(eventNames, function (data) {\n          off();\n          resolve(data);\n        });\n      });\n    }\n  }, {\n    key: \"events\",\n    value: function events(eventNames) {\n      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n      var _iterator8 = _createForOfIteratorHelper(eventNames),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var eventName = _step8.value;\n          assertEventName(eventName);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return iterator(this, eventNames);\n    }\n  }, {\n    key: \"emit\",\n    value: function () {\n      var _emit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(eventName, eventData) {\n        var listeners, anyListeners, staticListeners, staticAnyListeners;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                assertEventName(eventName);\n                enqueueProducers(this, eventName, eventData);\n                listeners = getListeners(this, eventName);\n                anyListeners = anyMap.get(this);\n                staticListeners = _toConsumableArray(listeners);\n                staticAnyListeners = isListenerSymbol(eventName) ? [] : _toConsumableArray(anyListeners);\n                _context5.next = 8;\n                return resolvedPromise;\n\n              case 8:\n                _context5.next = 10;\n                return Promise.all([].concat(_toConsumableArray(staticListeners.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(listener) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (!listeners.has(listener)) {\n                              _context3.next = 2;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"return\", listener(eventData));\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }())), _toConsumableArray(staticAnyListeners.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(listener) {\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            if (!anyListeners.has(listener)) {\n                              _context4.next = 2;\n                              break;\n                            }\n\n                            return _context4.abrupt(\"return\", listener(eventName, eventData));\n\n                          case 2:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()))));\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function emit(_x, _x2) {\n        return _emit.apply(this, arguments);\n      }\n\n      return emit;\n    }()\n  }, {\n    key: \"emitSerial\",\n    value: function () {\n      var _emitSerial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(eventName, eventData) {\n        var listeners, anyListeners, staticListeners, staticAnyListeners, _iterator9, _step9, listener, _iterator10, _step10, _listener;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assertEventName(eventName);\n                listeners = getListeners(this, eventName);\n                anyListeners = anyMap.get(this);\n                staticListeners = _toConsumableArray(listeners);\n                staticAnyListeners = _toConsumableArray(anyListeners);\n                _context6.next = 7;\n                return resolvedPromise;\n\n              case 7:\n                /* eslint-disable no-await-in-loop */\n                _iterator9 = _createForOfIteratorHelper(staticListeners);\n                _context6.prev = 8;\n\n                _iterator9.s();\n\n              case 10:\n                if ((_step9 = _iterator9.n()).done) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                listener = _step9.value;\n\n                if (!listeners.has(listener)) {\n                  _context6.next = 15;\n                  break;\n                }\n\n                _context6.next = 15;\n                return listener(eventData);\n\n              case 15:\n                _context6.next = 10;\n                break;\n\n              case 17:\n                _context6.next = 22;\n                break;\n\n              case 19:\n                _context6.prev = 19;\n                _context6.t0 = _context6[\"catch\"](8);\n\n                _iterator9.e(_context6.t0);\n\n              case 22:\n                _context6.prev = 22;\n\n                _iterator9.f();\n\n                return _context6.finish(22);\n\n              case 25:\n                _iterator10 = _createForOfIteratorHelper(staticAnyListeners);\n                _context6.prev = 26;\n\n                _iterator10.s();\n\n              case 28:\n                if ((_step10 = _iterator10.n()).done) {\n                  _context6.next = 35;\n                  break;\n                }\n\n                _listener = _step10.value;\n\n                if (!anyListeners.has(_listener)) {\n                  _context6.next = 33;\n                  break;\n                }\n\n                _context6.next = 33;\n                return _listener(eventName, eventData);\n\n              case 33:\n                _context6.next = 28;\n                break;\n\n              case 35:\n                _context6.next = 40;\n                break;\n\n              case 37:\n                _context6.prev = 37;\n                _context6.t1 = _context6[\"catch\"](26);\n\n                _iterator10.e(_context6.t1);\n\n              case 40:\n                _context6.prev = 40;\n\n                _iterator10.f();\n\n                return _context6.finish(40);\n\n              case 43:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[8, 19, 22, 25], [26, 37, 40, 43]]);\n      }));\n\n      function emitSerial(_x5, _x6) {\n        return _emitSerial.apply(this, arguments);\n      }\n\n      return emitSerial;\n    }()\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      assertListener(listener);\n      anyMap.get(this).add(listener);\n      this.emit(listenerAdded, {\n        listener: listener\n      });\n      return this.offAny.bind(this, listener);\n    }\n  }, {\n    key: \"anyEvent\",\n    value: function anyEvent() {\n      return iterator(this);\n    }\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      assertListener(listener);\n      this.emit(listenerRemoved, {\n        listener: listener\n      });\n      anyMap.get(this).delete(listener);\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners(eventNames) {\n      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n      var _iterator11 = _createForOfIteratorHelper(eventNames),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var eventName = _step11.value;\n\n          if (typeof eventName === 'string' || typeof eventName === 'symbol') {\n            getListeners(this, eventName).clear();\n            var producers = getEventProducers(this, eventName);\n\n            var _iterator12 = _createForOfIteratorHelper(producers),\n                _step12;\n\n            try {\n              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                var producer = _step12.value;\n                producer.finish();\n              }\n            } catch (err) {\n              _iterator12.e(err);\n            } finally {\n              _iterator12.f();\n            }\n\n            producers.clear();\n          } else {\n            anyMap.get(this).clear();\n\n            var _iterator13 = _createForOfIteratorHelper(eventsMap.get(this).values()),\n                _step13;\n\n            try {\n              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                var listeners = _step13.value;\n                listeners.clear();\n              }\n            } catch (err) {\n              _iterator13.e(err);\n            } finally {\n              _iterator13.f();\n            }\n\n            var _iterator14 = _createForOfIteratorHelper(producersMap.get(this).values()),\n                _step14;\n\n            try {\n              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                var _producers = _step14.value;\n\n                var _iterator15 = _createForOfIteratorHelper(_producers),\n                    _step15;\n\n                try {\n                  for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                    var _producer2 = _step15.value;\n\n                    _producer2.finish();\n                  }\n                } catch (err) {\n                  _iterator15.e(err);\n                } finally {\n                  _iterator15.f();\n                }\n\n                _producers.clear();\n              }\n            } catch (err) {\n              _iterator14.e(err);\n            } finally {\n              _iterator14.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventNames) {\n      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n      var count = 0;\n\n      var _iterator16 = _createForOfIteratorHelper(eventNames),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var eventName = _step16.value;\n\n          if (typeof eventName === 'string') {\n            count += anyMap.get(this).size + getListeners(this, eventName).size + getEventProducers(this, eventName).size + getEventProducers(this).size;\n            continue;\n          }\n\n          if (typeof eventName !== 'undefined') {\n            assertEventName(eventName);\n          }\n\n          count += anyMap.get(this).size;\n\n          var _iterator17 = _createForOfIteratorHelper(eventsMap.get(this).values()),\n              _step17;\n\n          try {\n            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n              var value = _step17.value;\n              count += value.size;\n            }\n          } catch (err) {\n            _iterator17.e(err);\n          } finally {\n            _iterator17.f();\n          }\n\n          var _iterator18 = _createForOfIteratorHelper(producersMap.get(this).values()),\n              _step18;\n\n          try {\n            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n              var _value = _step18.value;\n              count += _value.size;\n            }\n          } catch (err) {\n            _iterator18.e(err);\n          } finally {\n            _iterator18.f();\n          }\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      return count;\n    }\n  }, {\n    key: \"bindMethods\",\n    value: function bindMethods(target, methodNames) {\n      if (typeof target !== 'object' || target === null) {\n        throw new TypeError('`target` must be an object');\n      }\n\n      methodNames = defaultMethodNamesOrAssert(methodNames);\n\n      var _iterator19 = _createForOfIteratorHelper(methodNames),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var methodName = _step19.value;\n\n          if (target[methodName] !== undefined) {\n            throw new Error(\"The property `\".concat(methodName, \"` already exists on `target`\"));\n          }\n\n          Object.defineProperty(target, methodName, {\n            enumerable: false,\n            value: this[methodName].bind(this)\n          });\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n  }], [{\n    key: \"mixin\",\n    value: function mixin(emitteryPropertyName, methodNames) {\n      methodNames = defaultMethodNamesOrAssert(methodNames);\n      return function (target) {\n        if (typeof target !== 'function') {\n          throw new TypeError('`target` must be function');\n        }\n\n        var _iterator20 = _createForOfIteratorHelper(methodNames),\n            _step20;\n\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var methodName = _step20.value;\n\n            if (target.prototype[methodName] !== undefined) {\n              throw new Error(\"The property `\".concat(methodName, \"` already exists on `target`\"));\n            }\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n\n        function getEmitteryProperty() {\n          Object.defineProperty(this, emitteryPropertyName, {\n            enumerable: false,\n            value: new Emittery()\n          });\n          return this[emitteryPropertyName];\n        }\n\n        Object.defineProperty(target.prototype, emitteryPropertyName, {\n          enumerable: false,\n          get: getEmitteryProperty\n        });\n\n        var emitteryMethodCaller = function emitteryMethodCaller(methodName) {\n          return function () {\n            var _this$emitteryPropert;\n\n            return (_this$emitteryPropert = this[emitteryPropertyName])[methodName].apply(_this$emitteryPropert, arguments);\n          };\n        };\n\n        var _iterator21 = _createForOfIteratorHelper(methodNames),\n            _step21;\n\n        try {\n          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n            var _methodName = _step21.value;\n            Object.defineProperty(target.prototype, _methodName, {\n              enumerable: false,\n              value: emitteryMethodCaller(_methodName)\n            });\n          }\n        } catch (err) {\n          _iterator21.e(err);\n        } finally {\n          _iterator21.f();\n        }\n\n        return target;\n      };\n    }\n  }]);\n\n  return Emittery;\n}();\n\nvar allEmitteryMethods = Object.getOwnPropertyNames(Emittery.prototype).filter(function (v) {\n  return v !== 'constructor';\n}); // Subclass used to encourage TS users to type their events.\n\nEmittery.Typed = /*#__PURE__*/function (_Emittery) {\n  _inherits(_class, _Emittery);\n\n  var _super = _createSuper(_class);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _class;\n}(Emittery);\n\nObject.defineProperty(Emittery.Typed, 'Typed', {\n  enumerable: false,\n  value: undefined\n});\nObject.defineProperty(Emittery, 'listenerAdded', {\n  value: listenerAdded,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\nObject.defineProperty(Emittery, 'listenerRemoved', {\n  value: listenerRemoved,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\nmodule.exports = Emittery;","map":{"version":3,"sources":["C:/Users/saylo/Documents/GitHub/ESOF432/comment-frontend/node_modules/emittery/index.js"],"names":["anyMap","WeakMap","eventsMap","producersMap","anyProducer","Symbol","resolvedPromise","Promise","resolve","listenerAdded","listenerRemoved","assertEventName","eventName","TypeError","assertListener","listener","getListeners","instance","events","get","has","set","Set","getEventProducers","key","producers","enqueueProducers","eventData","producer","enqueue","item","all","iterator","eventNames","Array","isArray","isFinished","flush","queue","push","finish","add","next","done","length","undefined","shift","value","return","delete","arguments","asyncIterator","defaultMethodNamesOrAssert","methodNames","allEmitteryMethods","methodName","includes","Error","isListenerSymbol","symbol","Emittery","Map","emit","off","bind","on","data","listeners","anyListeners","staticListeners","staticAnyListeners","map","offAny","clear","values","count","size","target","Object","defineProperty","enumerable","emitteryPropertyName","prototype","getEmitteryProperty","emitteryMethodCaller","getOwnPropertyNames","filter","v","Typed","writable","configurable","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst anyMap = new WeakMap();\nconst eventsMap = new WeakMap();\nconst producersMap = new WeakMap();\nconst anyProducer = Symbol('anyProducer');\nconst resolvedPromise = Promise.resolve();\n\nconst listenerAdded = Symbol('listenerAdded');\nconst listenerRemoved = Symbol('listenerRemoved');\n\nfunction assertEventName(eventName) {\n\tif (typeof eventName !== 'string' && typeof eventName !== 'symbol') {\n\t\tthrow new TypeError('eventName must be a string or a symbol');\n\t}\n}\n\nfunction assertListener(listener) {\n\tif (typeof listener !== 'function') {\n\t\tthrow new TypeError('listener must be a function');\n\t}\n}\n\nfunction getListeners(instance, eventName) {\n\tconst events = eventsMap.get(instance);\n\tif (!events.has(eventName)) {\n\t\tevents.set(eventName, new Set());\n\t}\n\n\treturn events.get(eventName);\n}\n\nfunction getEventProducers(instance, eventName) {\n\tconst key = typeof eventName === 'string' || typeof eventName === 'symbol' ? eventName : anyProducer;\n\tconst producers = producersMap.get(instance);\n\tif (!producers.has(key)) {\n\t\tproducers.set(key, new Set());\n\t}\n\n\treturn producers.get(key);\n}\n\nfunction enqueueProducers(instance, eventName, eventData) {\n\tconst producers = producersMap.get(instance);\n\tif (producers.has(eventName)) {\n\t\tfor (const producer of producers.get(eventName)) {\n\t\t\tproducer.enqueue(eventData);\n\t\t}\n\t}\n\n\tif (producers.has(anyProducer)) {\n\t\tconst item = Promise.all([eventName, eventData]);\n\t\tfor (const producer of producers.get(anyProducer)) {\n\t\t\tproducer.enqueue(item);\n\t\t}\n\t}\n}\n\nfunction iterator(instance, eventNames) {\n\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n\tlet isFinished = false;\n\tlet flush = () => {};\n\tlet queue = [];\n\n\tconst producer = {\n\t\tenqueue(item) {\n\t\t\tqueue.push(item);\n\t\t\tflush();\n\t\t},\n\t\tfinish() {\n\t\t\tisFinished = true;\n\t\t\tflush();\n\t\t}\n\t};\n\n\tfor (const eventName of eventNames) {\n\t\tgetEventProducers(instance, eventName).add(producer);\n\t}\n\n\treturn {\n\t\tasync next() {\n\t\t\tif (!queue) {\n\t\t\t\treturn {done: true};\n\t\t\t}\n\n\t\t\tif (queue.length === 0) {\n\t\t\t\tif (isFinished) {\n\t\t\t\t\tqueue = undefined;\n\t\t\t\t\treturn this.next();\n\t\t\t\t}\n\n\t\t\t\tawait new Promise(resolve => {\n\t\t\t\t\tflush = resolve;\n\t\t\t\t});\n\n\t\t\t\treturn this.next();\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdone: false,\n\t\t\t\tvalue: await queue.shift()\n\t\t\t};\n\t\t},\n\n\t\tasync return(value) {\n\t\t\tqueue = undefined;\n\n\t\t\tfor (const eventName of eventNames) {\n\t\t\t\tgetEventProducers(instance, eventName).delete(producer);\n\t\t\t}\n\n\t\t\tflush();\n\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\t{done: true, value: await value} :\n\t\t\t\t{done: true};\n\t\t},\n\n\t\t[Symbol.asyncIterator]() {\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\nfunction defaultMethodNamesOrAssert(methodNames) {\n\tif (methodNames === undefined) {\n\t\treturn allEmitteryMethods;\n\t}\n\n\tif (!Array.isArray(methodNames)) {\n\t\tthrow new TypeError('`methodNames` must be an array of strings');\n\t}\n\n\tfor (const methodName of methodNames) {\n\t\tif (!allEmitteryMethods.includes(methodName)) {\n\t\t\tif (typeof methodName !== 'string') {\n\t\t\t\tthrow new TypeError('`methodNames` element must be a string');\n\t\t\t}\n\n\t\t\tthrow new Error(`${methodName} is not Emittery method`);\n\t\t}\n\t}\n\n\treturn methodNames;\n}\n\nconst isListenerSymbol = symbol => symbol === listenerAdded || symbol === listenerRemoved;\n\nclass Emittery {\n\tstatic mixin(emitteryPropertyName, methodNames) {\n\t\tmethodNames = defaultMethodNamesOrAssert(methodNames);\n\t\treturn target => {\n\t\t\tif (typeof target !== 'function') {\n\t\t\t\tthrow new TypeError('`target` must be function');\n\t\t\t}\n\n\t\t\tfor (const methodName of methodNames) {\n\t\t\t\tif (target.prototype[methodName] !== undefined) {\n\t\t\t\t\tthrow new Error(`The property \\`${methodName}\\` already exists on \\`target\\``);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getEmitteryProperty() {\n\t\t\t\tObject.defineProperty(this, emitteryPropertyName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: new Emittery()\n\t\t\t\t});\n\t\t\t\treturn this[emitteryPropertyName];\n\t\t\t}\n\n\t\t\tObject.defineProperty(target.prototype, emitteryPropertyName, {\n\t\t\t\tenumerable: false,\n\t\t\t\tget: getEmitteryProperty\n\t\t\t});\n\n\t\t\tconst emitteryMethodCaller = methodName => function (...args) {\n\t\t\t\treturn this[emitteryPropertyName][methodName](...args);\n\t\t\t};\n\n\t\t\tfor (const methodName of methodNames) {\n\t\t\t\tObject.defineProperty(target.prototype, methodName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: emitteryMethodCaller(methodName)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\t}\n\n\tconstructor() {\n\t\tanyMap.set(this, new Set());\n\t\teventsMap.set(this, new Map());\n\t\tproducersMap.set(this, new Map());\n\t}\n\n\ton(eventNames, listener) {\n\t\tassertListener(listener);\n\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t\tgetListeners(this, eventName).add(listener);\n\n\t\t\tif (!isListenerSymbol(eventName)) {\n\t\t\t\tthis.emit(listenerAdded, {eventName, listener});\n\t\t\t}\n\t\t}\n\n\t\treturn this.off.bind(this, eventNames, listener);\n\t}\n\n\toff(eventNames, listener) {\n\t\tassertListener(listener);\n\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t\tgetListeners(this, eventName).delete(listener);\n\n\t\t\tif (!isListenerSymbol(eventName)) {\n\t\t\t\tthis.emit(listenerRemoved, {eventName, listener});\n\t\t\t}\n\t\t}\n\t}\n\n\tonce(eventNames) {\n\t\treturn new Promise(resolve => {\n\t\t\tconst off = this.on(eventNames, data => {\n\t\t\t\toff();\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t}\n\n\tevents(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tfor (const eventName of eventNames) {\n\t\t\tassertEventName(eventName);\n\t\t}\n\n\t\treturn iterator(this, eventNames);\n\t}\n\n\tasync emit(eventName, eventData) {\n\t\tassertEventName(eventName);\n\n\t\tenqueueProducers(this, eventName, eventData);\n\n\t\tconst listeners = getListeners(this, eventName);\n\t\tconst anyListeners = anyMap.get(this);\n\t\tconst staticListeners = [...listeners];\n\t\tconst staticAnyListeners = isListenerSymbol(eventName) ? [] : [...anyListeners];\n\n\t\tawait resolvedPromise;\n\t\tawait Promise.all([\n\t\t\t...staticListeners.map(async listener => {\n\t\t\t\tif (listeners.has(listener)) {\n\t\t\t\t\treturn listener(eventData);\n\t\t\t\t}\n\t\t\t}),\n\t\t\t...staticAnyListeners.map(async listener => {\n\t\t\t\tif (anyListeners.has(listener)) {\n\t\t\t\t\treturn listener(eventName, eventData);\n\t\t\t\t}\n\t\t\t})\n\t\t]);\n\t}\n\n\tasync emitSerial(eventName, eventData) {\n\t\tassertEventName(eventName);\n\n\t\tconst listeners = getListeners(this, eventName);\n\t\tconst anyListeners = anyMap.get(this);\n\t\tconst staticListeners = [...listeners];\n\t\tconst staticAnyListeners = [...anyListeners];\n\n\t\tawait resolvedPromise;\n\t\t/* eslint-disable no-await-in-loop */\n\t\tfor (const listener of staticListeners) {\n\t\t\tif (listeners.has(listener)) {\n\t\t\t\tawait listener(eventData);\n\t\t\t}\n\t\t}\n\n\t\tfor (const listener of staticAnyListeners) {\n\t\t\tif (anyListeners.has(listener)) {\n\t\t\t\tawait listener(eventName, eventData);\n\t\t\t}\n\t\t}\n\t\t/* eslint-enable no-await-in-loop */\n\t}\n\n\tonAny(listener) {\n\t\tassertListener(listener);\n\t\tanyMap.get(this).add(listener);\n\t\tthis.emit(listenerAdded, {listener});\n\t\treturn this.offAny.bind(this, listener);\n\t}\n\n\tanyEvent() {\n\t\treturn iterator(this);\n\t}\n\n\toffAny(listener) {\n\t\tassertListener(listener);\n\t\tthis.emit(listenerRemoved, {listener});\n\t\tanyMap.get(this).delete(listener);\n\t}\n\n\tclearListeners(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\n\t\tfor (const eventName of eventNames) {\n\t\t\tif (typeof eventName === 'string' || typeof eventName === 'symbol') {\n\t\t\t\tgetListeners(this, eventName).clear();\n\n\t\t\t\tconst producers = getEventProducers(this, eventName);\n\n\t\t\t\tfor (const producer of producers) {\n\t\t\t\t\tproducer.finish();\n\t\t\t\t}\n\n\t\t\t\tproducers.clear();\n\t\t\t} else {\n\t\t\t\tanyMap.get(this).clear();\n\n\t\t\t\tfor (const listeners of eventsMap.get(this).values()) {\n\t\t\t\t\tlisteners.clear();\n\t\t\t\t}\n\n\t\t\t\tfor (const producers of producersMap.get(this).values()) {\n\t\t\t\t\tfor (const producer of producers) {\n\t\t\t\t\t\tproducer.finish();\n\t\t\t\t\t}\n\n\t\t\t\t\tproducers.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlistenerCount(eventNames) {\n\t\teventNames = Array.isArray(eventNames) ? eventNames : [eventNames];\n\t\tlet count = 0;\n\n\t\tfor (const eventName of eventNames) {\n\t\t\tif (typeof eventName === 'string') {\n\t\t\t\tcount += anyMap.get(this).size + getListeners(this, eventName).size +\n\t\t\t\t\tgetEventProducers(this, eventName).size + getEventProducers(this).size;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (typeof eventName !== 'undefined') {\n\t\t\t\tassertEventName(eventName);\n\t\t\t}\n\n\t\t\tcount += anyMap.get(this).size;\n\n\t\t\tfor (const value of eventsMap.get(this).values()) {\n\t\t\t\tcount += value.size;\n\t\t\t}\n\n\t\t\tfor (const value of producersMap.get(this).values()) {\n\t\t\t\tcount += value.size;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tbindMethods(target, methodNames) {\n\t\tif (typeof target !== 'object' || target === null) {\n\t\t\tthrow new TypeError('`target` must be an object');\n\t\t}\n\n\t\tmethodNames = defaultMethodNamesOrAssert(methodNames);\n\n\t\tfor (const methodName of methodNames) {\n\t\t\tif (target[methodName] !== undefined) {\n\t\t\t\tthrow new Error(`The property \\`${methodName}\\` already exists on \\`target\\``);\n\t\t\t}\n\n\t\t\tObject.defineProperty(target, methodName, {\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: this[methodName].bind(this)\n\t\t\t});\n\t\t}\n\t}\n}\n\nconst allEmitteryMethods = Object.getOwnPropertyNames(Emittery.prototype).filter(v => v !== 'constructor');\n\n// Subclass used to encourage TS users to type their events.\nEmittery.Typed = class extends Emittery {};\nObject.defineProperty(Emittery.Typed, 'Typed', {\n\tenumerable: false,\n\tvalue: undefined\n});\n\nObject.defineProperty(Emittery, 'listenerAdded', {\n\tvalue: listenerAdded,\n\twritable: false,\n\tenumerable: true,\n\tconfigurable: false\n});\nObject.defineProperty(Emittery, 'listenerRemoved', {\n\tvalue: listenerRemoved,\n\twritable: false,\n\tenumerable: true,\n\tconfigurable: false\n});\n\nmodule.exports = Emittery;\n"]},"metadata":{},"sourceType":"script"}