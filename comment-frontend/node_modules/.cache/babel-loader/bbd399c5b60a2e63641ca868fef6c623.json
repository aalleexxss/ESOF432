{"ast":null,"code":"import { jsx as jsx$1 } from '@theme-ui/core';\nexport { Context, merge, useThemeUI } from '@theme-ui/core';\nexport { InitializeColorMode, useColorMode } from '@theme-ui/color-modes';\nexport { Themed, components } from '@theme-ui/mdx';\nexport { ThemeProvider } from '@theme-ui/theme-provider';\nexport * from '@theme-ui/components';\nexport { css, get } from '@theme-ui/css';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar BaseStyles = function BaseStyles(props) {\n  return jsx('div', _extends({}, props, {\n    sx: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      variant: 'styles'\n    }\n  }));\n};\n\nvar jsx = jsx$1;\nexport { BaseStyles, jsx };","map":{"version":3,"sources":["../src/index.ts"],"names":["BaseStyles","jsx","sx","fontFamily","lineHeight","fontWeight","variant","coreJsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IA0BaA,UAAU,GAAG,SAAbA,UAAa,CAAA,KAAA,EAAA;AAAA,SACxBC,GAAG,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEDC,IAAAA,EAAE,EAAE;AACFC,MAAAA,UAAU,EADR,MAAA;AAEFC,MAAAA,UAAU,EAFR,MAAA;AAGFC,MAAAA,UAAU,EAHR,MAAA;AAIFC,MAAAA,OAAO,EAAE;AAJP;AAFH,GAAA,CAAA,CADqB;AAAA,C;;IAWbL,GAAG,GAAGM,K","sourcesContent":["import { jsx as coreJsx, ThemeUIJSX } from '@theme-ui/core'\nexport { Context, merge, useThemeUI } from '@theme-ui/core'\nexport type {\n  ContextValue,\n  IntrinsicSxElements,\n  SxProp,\n  ColorMode,\n  ColorModesScale,\n  CSSObject,\n  CSSProperties,\n  CSSPseudoSelectorProps,\n  ResponsiveStyleValue,\n  ThemeUICSSProperties,\n  ThemeUIStyleObject,\n  ThemeUICSSObject,\n  Theme,\n  ThemeStyles,\n  TLengthStyledSystem,\n  StylePropertyValue,\n} from '@theme-ui/core'\nexport { useColorMode, InitializeColorMode } from '@theme-ui/color-modes'\nexport { Themed, components } from '@theme-ui/mdx'\nexport { ThemeProvider } from '@theme-ui/theme-provider'\nexport * from '@theme-ui/components'\nexport { css, get } from '@theme-ui/css'\n\nexport const BaseStyles = (props: Record<string, unknown>) =>\n  jsx('div', {\n    ...props,\n    sx: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      variant: 'styles',\n    },\n  })\n\nexport const jsx = coreJsx\nexport declare namespace jsx {\n  export namespace JSX {\n    export interface Element extends ThemeUIJSX.Element {}\n    export interface ElementClass extends ThemeUIJSX.ElementClass {}\n    export interface ElementAttributesProperty\n      extends ThemeUIJSX.ElementAttributesProperty {}\n    export interface ElementChildrenAttribute\n      extends ThemeUIJSX.ElementChildrenAttribute {}\n    export type LibraryManagedAttributes<\n      C,\n      P\n    > = ThemeUIJSX.LibraryManagedAttributes<C, P>\n    export interface IntrinsicAttributes\n      extends ThemeUIJSX.IntrinsicAttributes {}\n    export interface IntrinsicClassAttributes<T>\n      extends ThemeUIJSX.IntrinsicClassAttributes<T> {}\n    export interface IntrinsicElements extends ThemeUIJSX.IntrinsicElements {}\n  }\n}\n"]},"metadata":{},"sourceType":"module"}