{"ast":null,"code":"import { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport { createContext, useContext } from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport parseProps from '@theme-ui/parse-props';\nexport { __internalGetUseRootStyles } from '@theme-ui/css';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar __EMOTION_VERSION__ = packageInfo.version;\n\nvar jsx = function jsx(type, props) {\n  return jsx$1.apply(void 0, [type, parseProps(props)].concat([].slice.call(arguments, 2)));\n};\n\nvar Context = createContext({\n  __EMOTION_VERSION__: __EMOTION_VERSION__,\n  theme: {}\n});\n\nvar useThemeUI = function useThemeUI() {\n  return useContext(Context);\n};\n\nvar canUseSymbol = typeof Symbol === 'function' && Symbol[\"for\"];\nvar REACT_ELEMENT = canUseSymbol ? Symbol[\"for\"]('react.element') : 0xeac7;\nvar FORWARD_REF = canUseSymbol ? Symbol[\"for\"]('react.forward_ref') : 0xeac7;\nvar deepmergeOptions = {\n  isMergeableObject: function isMergeableObject(n) {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: function arrayMerge(_leftArray, rightArray) {\n    return rightArray;\n  }\n};\n/**\r\n * Deeply merge themes\r\n */\n\nvar merge = function merge(a, b) {\n  return deepmerge(a, b, deepmergeOptions);\n};\n\nfunction mergeAll() {\n  return deepmerge.all([].slice.call(arguments), deepmergeOptions);\n}\n\nmerge.all = mergeAll;\n\nvar BaseProvider = function BaseProvider(_ref) {\n  var context = _ref.context,\n      children = _ref.children;\n  return jsx(ThemeContext.Provider, {\n    value: context.theme\n  }, jsx(Context.Provider, {\n    value: context,\n    children: children\n  }));\n};\n\nfunction ThemeProvider(_ref2) {\n  var theme = _ref2.theme,\n      children = _ref2.children;\n  var outer = useThemeUI();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n\n  var context = typeof theme === 'function' ? _extends({}, outer, {\n    theme: theme(outer.theme)\n  }) : merge.all({}, outer, {\n    theme: theme\n  });\n  return jsx(BaseProvider, {\n    context: context\n  }, children);\n}\n\nexport { Context, ThemeProvider, jsx, merge, useThemeUI };","map":{"version":3,"sources":["../src/index.ts"],"names":["__EMOTION_VERSION__","packageInfo","jsx","emotionJsx","parseProps","Context","theme","useThemeUI","React","canUseSymbol","Symbol","REACT_ELEMENT","FORWARD_REF","deepmergeOptions","isMergeableObject","n","arrayMerge","merge","deepmerge","BaseProvider","context","children","EmotionContext","value","ThemeProvider","outer","process","console"],"mappings":"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","sourcesContent":["import {\n  jsx as emotionJsx,\n  ThemeContext as EmotionContext,\n} from '@emotion/react'\nimport { Theme } from '@theme-ui/css'\nimport * as React from 'react'\nimport deepmerge from 'deepmerge'\nimport packageInfo from '@emotion/react/package.json'\nimport parseProps from '@theme-ui/parse-props'\n\nimport { ThemeUIJSX } from './jsx-namespace'\nexport type { ThemeUIJSX } from './jsx-namespace'\n\nexport type {\n  CSSObject,\n  CSSOthersObject,\n  CSSProperties,\n  CSSPseudoSelectorProps,\n  ColorMode,\n  ColorModesScale,\n  Label,\n  ResponsiveStyleValue,\n  Scale,\n  StylePropertyValue,\n  TLengthStyledSystem,\n  Theme,\n  ThemeDerivedStyles,\n  ThemeStyles,\n  ThemeUICSSObject,\n  ThemeUICSSProperties,\n  ThemeUIExtendedCSSProperties,\n  ThemeUIStyleObject,\n  VariantProperty,\n} from '@theme-ui/css'\n\n\nexport { __internalGetUseRootStyles } from '@theme-ui/css'\nexport * from './types'\n\nconst __EMOTION_VERSION__ = packageInfo.version\n\nexport const jsx: typeof React.createElement = <P extends {}>(\n  type: React.FunctionComponent<P> | React.ComponentClass<P> | string,\n  props: React.Attributes & P,\n  ...children: React.ReactNode[]\n): any => emotionJsx(type, parseProps(props), ...children)\n\nexport declare namespace jsx {\n  export namespace JSX {\n    export interface Element extends ThemeUIJSX.Element {}\n    export interface ElementClass extends ThemeUIJSX.ElementClass {}\n    export interface ElementAttributesProperty\n      extends ThemeUIJSX.ElementAttributesProperty {}\n    export interface ElementChildrenAttribute\n      extends ThemeUIJSX.ElementChildrenAttribute {}\n    export type LibraryManagedAttributes<\n      C,\n      P\n    > = ThemeUIJSX.LibraryManagedAttributes<C, P>\n    export interface IntrinsicAttributes\n      extends ThemeUIJSX.IntrinsicAttributes {}\n    export interface IntrinsicClassAttributes<T>\n      extends ThemeUIJSX.IntrinsicClassAttributes<T> {}\n    export type IntrinsicElements = ThemeUIJSX.IntrinsicElements\n  }\n}\n\nexport interface ContextValue {\n  __EMOTION_VERSION__: string\n  theme: Theme\n}\n\nexport const Context = React.createContext<ContextValue>({\n  __EMOTION_VERSION__,\n  theme: {},\n})\n\nexport const useThemeUI = () => React.useContext(Context)\n\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for\n\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7\n\nconst deepmergeOptions: deepmerge.Options = {\n  isMergeableObject: (n) => {\n    return (\n      !!n &&\n      typeof n === 'object' &&\n      (n as React.ExoticComponent).$$typeof !== REACT_ELEMENT &&\n      (n as React.ExoticComponent).$$typeof !== FORWARD_REF\n    )\n  },\n  arrayMerge: (_leftArray, rightArray) => rightArray,\n}\n\n/**\n * Deeply merge themes\n */\nexport const merge = (a: Theme, b: Theme): Theme =>\n  deepmerge(a, b, deepmergeOptions)\n\nfunction mergeAll<A, B>(a: A, B: B): A & B\nfunction mergeAll<A, B, C>(a: A, B: B, c: C): A & B & C\nfunction mergeAll<A, B, C, D>(a: A, B: B, c: C, d: D): A & B & C & D\nfunction mergeAll<T = Theme>(...args: Partial<T>[]) {\n  return deepmerge.all<T>(args, deepmergeOptions)\n}\n\nmerge.all = mergeAll\n\ninterface BaseProviderProps {\n  context: ContextValue\n}\nconst BaseProvider: React.FC<BaseProviderProps> = ({ context, children }) =>\n  jsx(\n    EmotionContext.Provider,\n    { value: context.theme },\n    jsx(Context.Provider, {\n      value: context,\n      children,\n    })\n  )\n\nexport interface ThemeProviderProps {\n  theme: Theme | ((outerTheme: Theme) => Theme)\n  children?: React.ReactNode\n}\n\nexport function ThemeProvider({ theme, children }: ThemeProviderProps) {\n  const outer = useThemeUI()\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn(\n        'Multiple versions of Emotion detected,',\n        'and theming might not work as expected.',\n        'Please ensure there is only one copy of @emotion/react installed in your application.'\n      )\n    }\n  }\n\n  const context =\n    typeof theme === 'function'\n      ? { ...outer, theme: theme(outer.theme) }\n      : merge.all({}, outer, { theme })\n\n  return jsx(BaseProvider, { context }, children)\n}\n"]},"metadata":{},"sourceType":"module"}