{"ast":null,"code":"import { useThemeUI, jsx, ThemeProvider as ThemeProvider$1, __internalGetUseRootStyles } from '@theme-ui/core';\nimport { css } from '@theme-ui/css';\nimport { ColorModeProvider } from '@theme-ui/color-modes';\nimport { MDXProvider } from '@theme-ui/mdx';\nimport { Global } from '@emotion/react';\n\nvar RootStyles = function RootStyles() {\n  return jsx(Global, {\n    styles: function styles(emotionTheme) {\n      var _css;\n\n      var theme = emotionTheme;\n\n      var use = __internalGetUseRootStyles(theme);\n\n      if (use.rootStyles === false || theme.styles && !theme.styles.root) {\n        return false;\n      }\n\n      var boxSizing = theme.useBorderBox === false ? undefined : 'border-box';\n      return css((_css = {\n        '*': {\n          boxSizing: boxSizing\n        }\n      }, _css[use.scope] = {\n        margin: 0,\n        variant: 'styles.root'\n      }, _css))(theme);\n    }\n  });\n};\n\nvar ThemeProvider = function ThemeProvider(_ref) {\n  var theme = _ref.theme,\n      components = _ref.components,\n      children = _ref.children;\n  var outer = useThemeUI();\n\n  if (typeof outer.setColorMode === 'function') {\n    return jsx(ThemeProvider$1, {\n      theme: theme\n    }, jsx(MDXProvider, {\n      components: components,\n      children: children\n    }));\n  }\n\n  return jsx(ThemeProvider$1, {\n    theme: theme\n  }, jsx(ColorModeProvider, null, jsx(RootStyles), jsx(MDXProvider, {\n    components: components,\n    children: children\n  })));\n};\n\nexport { ThemeProvider };","map":{"version":3,"sources":["../src/index.ts"],"names":["RootStyles","jsx","styles","theme","use","__internalGetUseRootStyles","boxSizing","css","margin","variant","ThemeProvider","components","children","outer","useThemeUI"],"mappings":";;;;;;AAaA,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAA;AAAA,SACjBC,GAAG,CAAA,MAAA,EAAS;AACVC,IAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,YAAA,EAAA;;;AACN,UAAMC,KAAK,GAAX,YAAA;;AACA,UAAMC,GAAG,GAAGC,0BAA0B,CAAtC,KAAsC,CAAtC;;AAEA,UAAID,GAAG,CAAHA,UAAAA,KAAAA,KAAAA,IAA6BD,KAAK,CAALA,MAAAA,IAAgB,CAACA,KAAK,CAALA,MAAAA,CAAlD,IAAA,EAAsE;AACpE,eAAA,KAAA;AACD;;AACD,UAAMG,SAAS,GAAGH,KAAK,CAALA,YAAAA,KAAAA,KAAAA,GAAAA,SAAAA,GAAlB,YAAA;AAEA,aAAOI,GAAG,EAAA,IAAA,GAAA;AACR,aAAK;AACHD,UAAAA,SAAS,EAATA;AADG;AADG,OAAA,EAAA,IAAA,CAIPF,GAAG,CAJI,KAAA,CAAA,GAIK;AACXI,QAAAA,MAAM,EADK,CAAA;AAEXC,QAAAA,OAAO,EAAE;AAFE,OAJL,EAAHF,IAAG,EAAHA,CAAP,KAAOA,CAAP;AASD;AAnBS,GAAT,CADc;AAAnB,CAAA;;IA4BaG,aAAa,GAAiC,SAA9CA,aAA8C,CAAA,IAAA,EAAA;MACzDP,KAAAA,GAAAA,IAAAA,CAAAA,K;MACAQ,UAAAA,GAAAA,IAAAA,CAAAA,U;MACAC,QAAAA,GAAAA,IAAAA,CAAAA,Q;AAEA,MAAMC,KAAK,GAAGC,UAAd,EAAA;;AAEA,MAAI,OAAOD,KAAK,CAAZ,YAAA,KAAJ,UAAA,EAA8C;AAC5C,WAAOZ,GAAG,CAAA,eAAA,EAER;AAAEE,MAAAA,KAAK,EAALA;AAAF,KAFQ,EAGRF,GAAG,CAAA,WAAA,EAAc;AACfU,MAAAA,UAAU,EADK,UAAA;AAEfC,MAAAA,QAAQ,EAARA;AAFe,KAAd,CAHK,CAAV;AAQD;;AAED,SAAOX,GAAG,CAAA,eAAA,EAER;AAAEE,IAAAA,KAAK,EAALA;AAAF,GAFQ,EAGRF,GAAG,CAAA,iBAAA,EAAA,IAAA,EAGDA,GAAG,CAHF,UAGE,CAHF,EAIDA,GAAG,CAAA,WAAA,EAAc;AACfU,IAAAA,UAAU,EADK,UAAA;AAEfC,IAAAA,QAAQ,EAARA;AAFe,GAAd,CAJF,CAHK,CAAV;AAaD,C","sourcesContent":["import {\n  jsx,\n  useThemeUI,\n  ThemeProvider as CoreProvider,\n  ThemeProviderProps as CoreThemeProviderProps,\n  IntrinsicSxElements,\n  __internalGetUseRootStyles,\n} from '@theme-ui/core'\nimport { css, Theme } from '@theme-ui/css'\nimport { ColorModeProvider } from '@theme-ui/color-modes'\nimport { MDXProvider, MDXProviderComponents } from '@theme-ui/mdx'\nimport { Global } from '@emotion/react'\n\nconst RootStyles = () =>\n  jsx(Global, {\n    styles: (emotionTheme) => {\n      const theme = emotionTheme as Theme\n      const use = __internalGetUseRootStyles(theme)\n\n      if (use.rootStyles === false || (theme.styles && !theme.styles.root)) {\n        return false\n      }\n      const boxSizing = theme.useBorderBox === false ? undefined : 'border-box'\n\n      return css({\n        '*': {\n          boxSizing,\n        },\n        [use.scope]: {\n          margin: 0,\n          variant: 'styles.root',\n        },\n      })(theme)\n    },\n  })\n\ninterface ThemeProviderProps extends Pick<CoreThemeProviderProps, 'theme'> {\n  children?: React.ReactNode\n  components?: MDXProviderComponents\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({\n  theme,\n  components,\n  children,\n}) => {\n  const outer = useThemeUI()\n\n  if (typeof outer.setColorMode === 'function') {\n    return jsx(\n      CoreProvider,\n      { theme },\n      jsx(MDXProvider, {\n        components,\n        children,\n      })\n    )\n  }\n\n  return jsx(\n    CoreProvider,\n    { theme },\n    jsx(\n      ColorModeProvider,\n      null,\n      jsx(RootStyles),\n      jsx(MDXProvider, {\n        components,\n        children,\n      })\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}