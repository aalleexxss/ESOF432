export declare type ConstructorArguments = {
    apiKey: string;
    recaptchaSiteKey?: string;
    baseUrl?: string;
    disableSessionId?: boolean;
};
declare class LikeButtonClient {
    client: Client;
    constructor(client: Client);
    press({ id, namespace, }: Paths.LikeButtonPress.PathParameters): Promise<Paths.LikeButtonPress.Responses.$200>;
    info({ id, namespace, }: Paths.LikeButtonInfo.PathParameters): Promise<Paths.LikeButtonInfo.Responses.$200>;
}
declare class ClapButtonClient {
    client: Client;
    constructor(client: Client);
    press({ id, namespace, }: Paths.ClapButtonPress.PathParameters): Promise<Paths.ClapButtonPress.Responses.$200>;
    info({ id, namespace, }: Paths.ClapButtonInfo.PathParameters): Promise<Paths.ClapButtonInfo.Responses.$200>;
}
declare class UpdownButtonClient {
    client: Client;
    constructor(client: Client);
    info({ id, namespace, }: Paths.UpdownButtonInfo.PathParameters): Promise<Paths.UpdownButtonInfo.Responses.$200>;
    pressUp({ id, namespace, }: Paths.UpdownButtonPressUp.PathParameters): Promise<Paths.UpdownButtonPressUp.Responses.$200>;
    pressDown({ id, namespace, }: Paths.UpdownButtonPressDown.PathParameters): Promise<Paths.UpdownButtonPressDown.Responses.$200>;
}
export declare class Client {
    apiKey: string;
    baseUrl: string;
    disableSessionId: boolean;
    recaptchaSiteKey: string | undefined;
    likeButtons: LikeButtonClient;
    clapButtons: ClapButtonClient;
    updownButtons: UpdownButtonClient;
    enqueueToBatch: (url: string) => Promise<any>;
    constructor({ apiKey, recaptchaSiteKey, baseUrl, disableSessionId, }: ConstructorArguments);
    get(url: string): Promise<any>;
    batch(calls: Array<[string]>): Promise<any>;
    put(url: string, recaptchaAction: string): Promise<any>;
    request(input: string, init?: {
        method: string;
        body?: Record<string, any>;
        recaptchaAction?: string;
        headers?: Record<string, string>;
    }): Promise<any>;
}
export {};
