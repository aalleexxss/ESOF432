import React, { FC } from 'react';
export interface UpdownButtonTemplateComponentProps {
    isLoading: boolean;
    userVoteDirection: number | undefined;
    totalScore: number | undefined;
    handlePressUp: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    handlePressDown: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    isCounterVisible: boolean;
}
declare type CallbackProps = Components.Schemas.UpdownButton['data'];
export interface UpdownButtonProps {
    id: string;
    namespace?: string;
    hideCounterIfLessThan?: number;
    onLoad?: (props: CallbackProps) => void;
    onPressUp?: (props: CallbackProps) => void;
    onPressDown?: (props: CallbackProps) => void;
    children?: (props: UpdownButtonTemplateComponentProps) => React.ReactElement<any, any> | null;
    component?: React.ComponentType<UpdownButtonTemplateComponentProps>;
}
declare type FCWithTemplates<Props> = FC<Props> & {
    templates: {
        Simple: React.ComponentType<UpdownButtonTemplateComponentProps>;
        Chevron: React.ComponentType<UpdownButtonTemplateComponentProps>;
        Reddit: React.ComponentType<UpdownButtonTemplateComponentProps>;
    };
};
declare const UpdownButton: FCWithTemplates<UpdownButtonProps>;
export { UpdownButton };
