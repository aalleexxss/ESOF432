import React, { useState, useEffect, useRef, useCallback, useContext } from 'react';
import { jsx, ThemeProvider } from 'theme-ui';
import { keyframes } from '@emotion/core';
import { camelizeKeys } from 'humps';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

var getSessionId = function getSessionId() {
  if (typeof window === 'undefined') {
    throw new Error('Session ID cannot be generated server-side!');
  } //TODO: remove sessionId legacy name


  var legacySessionId = window.localStorage.getItem('sessionId');

  if (legacySessionId) {
    window.localStorage.setItem('lyket-session-id', legacySessionId);
    window.localStorage.removeItem('sessionId');
  }

  var sessionId = window.localStorage.getItem('lyket-session-id');

  if (sessionId) {
    return sessionId;
  }

  var newSessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  window.localStorage.setItem('lyket-session-id', newSessionId);
  return newSessionId;
};

// A type of promise-like that resolves synchronously and supports only one observer
var _iteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = /*#__PURE__*/Symbol("Symbol.iterator")) : "@@iterator"; // Asynchronously iterate through an object's values
var _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = /*#__PURE__*/Symbol("Symbol.asyncIterator")) : "@@asyncIterator"; // Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing

function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }

  if (result && result.then) {
    return result.then(void 0, recover);
  }

  return result;
} // Asynchronously await a promise and pass the result to a finally continuation

function lazyLoadScript(src, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return new Promise(function (resolve, reject) {
    var _opts = opts,
        async = _opts.async,
        integrity = _opts.integrity,
        type = _opts.type;
    var sc = document.querySelector("script[src=\"" + src + "\"]");

    if (sc) {
      resolve(sc);
      return;
    }

    var script = document.createElement('script');
    script.src = src;
    if (async) script.setAttribute('async', 'true');
    if (integrity) script.setAttribute('integrity', integrity);
    if (type) script.setAttribute('type', type);

    script.onload = function () {
      return resolve(script);
    };

    script.onerror = function (event) {
      return reject(event);
    };

    document.body.appendChild(script);
  });
}

function generateRecaptchaToken(siteKey, action) {
  return lazyLoadScript("https://www.google.com/recaptcha/api.js?render=" + siteKey).then(function () {
    return new Promise(function (resolve, reject) {
      grecaptcha.ready(function () {
        try {
          var _temp2 = _catch(function () {
            return Promise.resolve(grecaptcha.execute(siteKey, {
              action: action
            })).then(function (token) {
              resolve(token);
            });
          }, function (e) {
            console.error('recaptcha error!', e);
            reject(e);
          });

          return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
        } catch (e) {
          return Promise.reject(e);
        }
      });
    });
  });
}

var ApiError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(ApiError, _Error);

  function ApiError(requestInfo, requestInit, response) {
    var _this;

    _this = _Error.call(this, "Failed API request to " + requestInfo + " with status " + response.status) || this;
    _this.requestInfo = requestInfo;
    _this.requestInit = requestInit;
    _this.response = response;
    return _this;
  }

  return ApiError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var now = function now() {
  return new Date().getTime();
};

function debounceCollect(func, wait) {
  var call = function call() {
    try {
      return Promise.resolve(func.call(null, args)).then(function (results) {
        for (var i = 0; i < results.length; i++) {
          deferreds[i].resolve(results[i]);
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var onTimeout = function onTimeout() {
    try {
      var elapsed = now() - timestamp;

      var _temp2 = function () {
        if (elapsed < wait && elapsed > 0) {
          timer = setTimeout(onTimeout, wait - elapsed);
        } else {
          timer = null;
          return Promise.resolve(call()).then(function () {
            if (!timer) reset();
          });
        }
      }();

      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var timer;
  var timestamp;
  var args = [];
  var deferreds = [];

  function reset() {
    args = [];
    deferreds = [];
  }

  return function debounced() {
    for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {
      callArgs[_key] = arguments[_key];
    }

    args.push(callArgs);
    timestamp = now();
    if (!timer) timer = setTimeout(onTimeout, wait);
    return new Promise(function (resolve, reject) {
      deferreds.push({
        resolve: resolve,
        reject: reject
      });
    });
  };
}

var LikeButtonClient = /*#__PURE__*/function () {
  function LikeButtonClient(client) {
    this.client = client;
  }

  var _proto = LikeButtonClient.prototype;

  _proto.press = function press(_ref) {
    var id = _ref.id,
        namespace = _ref.namespace;
    return this.client.put(namespace ? "/like-buttons/" + namespace + "/" + id + "/press" : "/like-buttons/" + id + "/press", 'press');
  };

  _proto.info = function info(_ref2) {
    var id = _ref2.id,
        namespace = _ref2.namespace;
    return this.client.enqueueToBatch(namespace ? "/like-buttons/" + namespace + "/" + id : "/like-buttons/" + id);
  };

  return LikeButtonClient;
}();

var ClapButtonClient = /*#__PURE__*/function () {
  function ClapButtonClient(client) {
    this.client = client;
  }

  var _proto2 = ClapButtonClient.prototype;

  _proto2.press = function press(_ref3) {
    var id = _ref3.id,
        namespace = _ref3.namespace;
    return this.client.put(namespace ? "/clap-buttons/" + namespace + "/" + id + "/press" : "/clap-buttons/" + id + "/press", 'press');
  };

  _proto2.info = function info(_ref4) {
    var id = _ref4.id,
        namespace = _ref4.namespace;
    return this.client.enqueueToBatch(namespace ? "/clap-buttons/" + namespace + "/" + id : "/clap-buttons/" + id);
  };

  return ClapButtonClient;
}();

var UpdownButtonClient = /*#__PURE__*/function () {
  function UpdownButtonClient(client) {
    this.client = client;
  }

  var _proto3 = UpdownButtonClient.prototype;

  _proto3.info = function info(_ref5) {
    var id = _ref5.id,
        namespace = _ref5.namespace;
    return this.client.enqueueToBatch(namespace ? "/updown-buttons/" + namespace + "/" + id : "/updown-buttons/" + id);
  };

  _proto3.pressUp = function pressUp(_ref6) {
    var id = _ref6.id,
        namespace = _ref6.namespace;
    return this.client.put(namespace ? "/updown-buttons/" + namespace + "/" + id + "/press-up" : "/updown-buttons/" + id + "/press-up", 'pressUp');
  };

  _proto3.pressDown = function pressDown(_ref7) {
    var id = _ref7.id,
        namespace = _ref7.namespace;
    return this.client.put(namespace ? "/updown-buttons/" + namespace + "/" + id + "/press-down" : "/updown-buttons/" + id + "/press-down", 'pressDown');
  };

  return UpdownButtonClient;
}();

var Client = /*#__PURE__*/function () {
  function Client(_ref8) {
    var apiKey = _ref8.apiKey,
        recaptchaSiteKey = _ref8.recaptchaSiteKey,
        baseUrl = _ref8.baseUrl,
        disableSessionId = _ref8.disableSessionId;
    this.apiKey = apiKey;
    this.recaptchaSiteKey = recaptchaSiteKey;
    this.disableSessionId = disableSessionId;
    this.baseUrl = baseUrl || 'https://api.lyket.dev';
    this.likeButtons = new LikeButtonClient(this);
    this.clapButtons = new ClapButtonClient(this);
    this.updownButtons = new UpdownButtonClient(this);
    this.enqueueToBatch = debounceCollect(this.batch.bind(this), 500);
  }

  var _proto4 = Client.prototype;

  _proto4.get = function get(url) {
    return this.request(url);
  };

  _proto4.batch = function batch(calls) {
    try {
      var _this2 = this;

      // return Promise.all(calls.map(args => this.request(args[0])));
      var url = '/buttons/batch';
      return Promise.resolve(_this2.request(url, {
        method: 'POST',
        body: {
          type: 'batch',
          data: {
            attributes: {
              urls: calls.map(function (args) {
                return args[0];
              })
            }
          }
        }
      })).then(function (result) {
        return result.data.attributes.responses;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto4.put = function put(url, recaptchaAction) {
    return this.request(url, {
      method: 'PUT',
      recaptchaAction: recaptchaAction
    });
  };

  _proto4.request = function request(input, init) {
    try {
      var _temp3 = function _temp3() {
        var url = _this4.baseUrl + "/v1" + input;
        var requestInit = init ? _extends({}, init, {
          headers: _extends({}, defaultHeaders, init.headers),
          body: init.body && JSON.stringify(init.body)
        }) : {
          headers: defaultHeaders
        };
        return Promise.resolve(fetch(url, requestInit)).then(function (response) {
          if (response.status < 200 || response.status >= 300) {
            throw new ApiError(url, requestInit, response);
          }

          return response.json();
        });
      };

      var _this4 = this;

      if (typeof window === 'undefined') {
        throw 'Client is supposed to be used client-side only!';
      }

      var defaultHeaders = {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        Authorization: "Bearer " + _this4.apiKey
      };

      if (!_this4.disableSessionId) {
        defaultHeaders['x-session-id'] = getSessionId();
      }

      var _temp4 = function () {
        if (_this4.recaptchaSiteKey && init && init.recaptchaAction) {
          return Promise.resolve(generateRecaptchaToken(_this4.recaptchaSiteKey, init.recaptchaAction)).then(function (_generateRecaptchaTok) {
            defaultHeaders['x-recaptcha-token'] = _generateRecaptchaTok;
          });
        }
      }();

      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return Client;
}();

var ClientContext = /*#__PURE__*/React.createContext(null);

var defaultTheme = {
  colors: {
    background: 'transparent',
    text: '#292929',
    primary: '#BFFCED',
    secondary: '#FBDEFB',
    highlight: '#e095ed'
  },
  fonts: {
    body: 'inherit'
  }
};

var clientInstances = {};

var getClientInstanceForSettings = function getClientInstanceForSettings(settings) {
  var key = JSON.stringify(settings);

  if (clientInstances[key]) {
    return clientInstances[key];
  }

  var client = new Client(settings);
  clientInstances[key] = client;
  return client;
};

var Provider = function Provider(_ref) {
  var apiKey = _ref.apiKey,
      recaptchaSiteKey = _ref.recaptchaSiteKey,
      disableSessionId = _ref.disableSessionId,
      baseUrl = _ref.baseUrl,
      children = _ref.children,
      customTheme = _ref.theme;

  var _useState = useState(getClientInstanceForSettings({
    apiKey: apiKey,
    recaptchaSiteKey: recaptchaSiteKey,
    disableSessionId: disableSessionId,
    baseUrl: baseUrl
  })),
      client = _useState[0],
      setClient = _useState[1];

  useEffect(function () {
    setClient(getClientInstanceForSettings({
      apiKey: apiKey,
      recaptchaSiteKey: recaptchaSiteKey,
      disableSessionId: disableSessionId,
      baseUrl: baseUrl
    }));
  }, [apiKey, disableSessionId, recaptchaSiteKey, baseUrl]);
  var theme = customTheme || {
    colors: {},
    fonts: {}
  };

  var colors = _extends({}, defaultTheme.colors, theme.colors);

  var fonts = _extends({}, defaultTheme.fonts, theme.fonts);

  return jsx(ThemeProvider, {
    theme: {
      useBodyStyles: false,
      useLocalStorage: false,
      colors: colors,
      fonts: fonts,
      styles: {}
    }
  }, jsx(ClientContext.Provider, {
    value: client
  }, children));
};

var useSafeEffect = function useSafeEffect(effect, deps) {
  var setState = useState()[1];
  return useEffect(function () {
    var safeRunner = function safeRunner() {
      try {
        var _temp2 = _catch(function () {
          return Promise.resolve(effect()).then(function () {});
        }, function (e) {
          setState(function () {
            throw e;
          });
        });

        return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
      } catch (e) {
        return Promise.reject(e);
      }
    };

    safeRunner();
  }, deps);
};

var ClapFull = function ClapFull(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 29 29",
    "aria-label": "clap",
    className: className
  }, React.createElement("path", {
    d: "M13.74 1l.76 2.97.76-2.97zM18.63 2.22l-1.43-.47-.4 3.03zM11.79 1.75l-1.43.47 1.84 2.56zM24.47 14.3L21.45 9c-.29-.43-.69-.7-1.12-.78a1.16 1.16 0 0 0-.91.22c-.3.23-.48.52-.54.84l.05.07 2.85 5c1.95 3.56 1.32 6.97-1.85 10.14a8.46 8.46 0 0 1-.55.5 5.75 5.75 0 0 0 3.36-1.76c3.26-3.27 3.04-6.75 1.73-8.91M14.58 10.89c-.16-.83.1-1.57.7-2.15l-2.5-2.49c-.5-.5-1.38-.5-1.88 0-.18.18-.27.4-.33.63l4.01 4z"
  }), React.createElement("path", {
    d: "M17.81 10.04a1.37 1.37 0 0 0-.88-.6.81.81 0 0 0-.64.15c-.18.13-.71.55-.24 1.56l1.43 3.03a.54.54 0 1 1-.87.61L9.2 7.38a.99.99 0 1 0-1.4 1.4l4.4 4.4a.54.54 0 1 1-.76.76l-4.4-4.4L5.8 8.3a.99.99 0 0 0-1.4 0 .98.98 0 0 0 0 1.39l1.25 1.24 4.4 4.4a.54.54 0 0 1 0 .76.54.54 0 0 1-.76 0l-4.4-4.4a1 1 0 0 0-1.4 0 .98.98 0 0 0 0 1.4l1.86 1.85 2.76 2.77a.54.54 0 0 1-.76.76L4.58 15.7a.98.98 0 0 0-1.4 0 .99.99 0 0 0 0 1.4l5.33 5.32c3.37 3.37 6.64 4.98 10.49 1.12 2.74-2.74 3.27-5.54 1.62-8.56l-2.8-4.94z"
  }));
};

var style = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.5em',
    color: 'text',
    fontWeight: 'body',
    fontFamily: 'body'
  },
  icon: {
    height: '2em',
    display: 'block',
    margin: '0 auto',
    fill: 'text'
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: 'highlight',
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '100%',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    width: '3em',
    height: '3em',
    padding: '0',
    lineHeight: '1em'
  },
  baloon: {
    opacity: '0',
    position: 'absolute',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    fontSize: '.8em',
    height: '3.4em',
    width: '3.4em',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'white',
    backgroundColor: 'text',
    borderRadius: '100%',
    top: '-3em',
    left: '-1.7em'
  },
  centeredContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  }
};

var theme = {
  buttons: {
    inactive: {
      transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
      backgroundColor: 'background'
    },
    active: {
      backgroundColor: 'primary'
    }
  }
};

var baloonFade = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0',
    transform: 'translateY(-1em)'
  },
  '72%': {
    opacity: '1',
    transform: 'translateY(-4em)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-6em)'
  }
});
var iconScale = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(0)'
  },
  '52%': {
    transform: 'scale(1.2)'
  },
  '72%': {
    transform: 'scale(0.9)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var ringScale = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '1',
    borderWidth: '0.5em'
  },
  '52%': {
    opacity: '0',
    borderWidth: '0'
  }
});
var BALOON = {
  durationMs: 800,
  animation: baloonFade
};
var ICON = {
  durationMs: 500,
  animation: iconScale
};
var RING = {
  durationMs: 600,
  animation: ringScale
};
var Simple = function Simple(_ref) {
  var isLoading = _ref.isLoading,
      userClaps = _ref.userClaps,
      totalClaps = _ref.totalClaps,
      handlePress = _ref.handlePress,
      isCounterVisible = _ref.isCounterVisible;

  var _useState = useState(false),
      animationActive = _useState[0],
      setAnimationActive = _useState[1];

  var timeoutId = useRef(null);
  var handleClick = useCallback(function (e) {
    setAnimationActive(true);

    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }

    timeoutId.current = setTimeout(function () {
      return setAnimationActive(false);
    }, BALOON.durationMs);
    handlePress(e);
  }, [handlePress]);

  var ringStyle = _extends({}, style.ring, {
    animation: animationActive ? RING.animation + " " + RING.durationMs + "ms ease forwards" : null
  });

  return jsx(ThemeProvider, {
    theme: theme
  }, jsx("div", {
    sx: style.root
  }, jsx("button", {
    onClick: handleClick,
    sx: _extends({}, style.button, {
      variant: userClaps ? 'buttons.active' : 'buttons.inactive',
      '@media (hover: hover)': {
        ':hover': {
          variant: 'buttons.active'
        }
      }
    }),
    disabled: isLoading
  }, jsx("div", {
    sx: style.centeredContainer
  }, jsx("div", {
    key: timeoutId.current && timeoutId.current.toString(),
    sx: _extends({}, style.baloon, {
      animation: animationActive ? BALOON.animation + " " + BALOON.durationMs + "ms ease forwards" : null
    })
  }, userClaps)), jsx("div", {
    sx: ringStyle
  }), jsx(ClapFull, {
    sx: _extends({}, style.icon, {
      animation: animationActive ? ICON.animation + " " + ICON.durationMs + "ms ease forwards" : null
    })
  })), isCounterVisible && jsx("div", {
    sx: style.counter
  }, totalClaps)));
};

var ClapEmpty = function ClapEmpty(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 33 33",
    "aria-label": "clap",
    className: className
  }, React.createElement("path", {
    d: "M28.86 17.34l-3.64-6.4c-.3-.43-.71-.73-1.16-.8a1.12 1.12 0 0 0-.9.21c-.62.5-.73 1.18-.32 2.06l1.22 2.6 1.4 2.45c2.23 4.09 1.51 8-2.15 11.66a9.6 9.6 0 0 1-.8.71 6.53 6.53 0 0 0 4.3-2.1c3.82-3.82 3.57-7.87 2.05-10.39zm-6.25 11.08c3.35-3.35 4-6.78 1.98-10.47L21.2 12c-.3-.43-.71-.72-1.16-.8a1.12 1.12 0 0 0-.9.22c-.62.49-.74 1.18-.32 2.06l1.72 3.63a.5.5 0 0 1-.81.57l-8.91-8.9a1.33 1.33 0 0 0-1.89 1.88l5.3 5.3a.5.5 0 0 1-.71.7l-5.3-5.3-1.49-1.49c-.5-.5-1.38-.5-1.88 0a1.34 1.34 0 0 0 0 1.89l1.49 1.5 5.3 5.28a.5.5 0 0 1-.36.86.5.5 0 0 1-.36-.15l-5.29-5.29a1.34 1.34 0 0 0-1.88 0 1.34 1.34 0 0 0 0 1.89l2.23 2.23L9.3 21.4a.5.5 0 0 1-.36.85.5.5 0 0 1-.35-.14l-3.32-3.33a1.33 1.33 0 0 0-1.89 0 1.32 1.32 0 0 0-.39.95c0 .35.14.69.4.94l6.39 6.4c3.53 3.53 8.86 5.3 12.82 1.35zM12.73 9.26l5.68 5.68-.49-1.04c-.52-1.1-.43-2.13.22-2.89l-3.3-3.3a1.34 1.34 0 0 0-1.88 0 1.33 1.33 0 0 0-.4.94c0 .22.07.42.17.61zm14.79 19.18a7.46 7.46 0 0 1-6.41 2.31 7.92 7.92 0 0 1-3.67.9c-3.05 0-6.12-1.63-8.36-3.88l-6.4-6.4A2.31 2.31 0 0 1 2 19.72a2.33 2.33 0 0 1 1.92-2.3l-.87-.87a2.34 2.34 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.64l-.14-.14a2.34 2.34 0 0 1 0-3.3 2.39 2.39 0 0 1 3.3 0l.14.14a2.33 2.33 0 0 1 3.95-1.24l.09.09c.09-.42.29-.83.62-1.16a2.34 2.34 0 0 1 3.3 0l3.38 3.39a2.17 2.17 0 0 1 1.27-.17c.54.08 1.03.35 1.45.76.1-.55.41-1.03.9-1.42a2.12 2.12 0 0 1 1.67-.4 2.8 2.8 0 0 1 1.85 1.25l3.65 6.43c1.7 2.83 2.03 7.37-2.2 11.6zM13.22.48l-1.92.89 2.37 2.83-.45-3.72zm8.48.88L19.78.5l-.44 3.7 2.36-2.84zM16.5 3.3L15.48 0h2.04L16.5 3.3z",
    fillRule: "evenodd"
  }));
};

var ClapFull$1 = function ClapFull(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 29 29",
    "aria-label": "clap",
    className: className
  }, React.createElement("path", {
    d: "M13.74 1l.76 2.97.76-2.97zM18.63 2.22l-1.43-.47-.4 3.03zM11.79 1.75l-1.43.47 1.84 2.56zM24.47 14.3L21.45 9c-.29-.43-.69-.7-1.12-.78a1.16 1.16 0 0 0-.91.22c-.3.23-.48.52-.54.84l.05.07 2.85 5c1.95 3.56 1.32 6.97-1.85 10.14a8.46 8.46 0 0 1-.55.5 5.75 5.75 0 0 0 3.36-1.76c3.26-3.27 3.04-6.75 1.73-8.91M14.58 10.89c-.16-.83.1-1.57.7-2.15l-2.5-2.49c-.5-.5-1.38-.5-1.88 0-.18.18-.27.4-.33.63l4.01 4z"
  }), React.createElement("path", {
    d: "M17.81 10.04a1.37 1.37 0 0 0-.88-.6.81.81 0 0 0-.64.15c-.18.13-.71.55-.24 1.56l1.43 3.03a.54.54 0 1 1-.87.61L9.2 7.38a.99.99 0 1 0-1.4 1.4l4.4 4.4a.54.54 0 1 1-.76.76l-4.4-4.4L5.8 8.3a.99.99 0 0 0-1.4 0 .98.98 0 0 0 0 1.39l1.25 1.24 4.4 4.4a.54.54 0 0 1 0 .76.54.54 0 0 1-.76 0l-4.4-4.4a1 1 0 0 0-1.4 0 .98.98 0 0 0 0 1.4l1.86 1.85 2.76 2.77a.54.54 0 0 1-.76.76L4.58 15.7a.98.98 0 0 0-1.4 0 .99.99 0 0 0 0 1.4l5.33 5.32c3.37 3.37 6.64 4.98 10.49 1.12 2.74-2.74 3.27-5.54 1.62-8.56l-2.8-4.94z"
  }));
};

var style$1 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.2em'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    p: 0,
    '@media (hover: hover)': {
      ':hover': {
        svg: {
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
          transform: 'scale(1.1)'
        }
      },
      ':active': {
        svg: {
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
          transform: 'scale(1.1)'
        }
      }
    }
  },
  baloon: {
    opacity: '0',
    position: 'absolute',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    fontSize: '.8em',
    height: '3.4em',
    width: '3.4em',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'white',
    background: '#292929',
    borderRadius: '100%',
    top: '-3em',
    left: '-1.7em'
  },
  centeredContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  }
};

var baloonFade$1 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0',
    transform: 'translateY(-1em)'
  },
  '72%': {
    opacity: '1',
    transform: 'translateY(-4em)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-6em)'
  }
});
var triangleFade = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0',
    transform: 'translateY(-0.5em) scale(1)'
  },
  '32%': {
    opacity: '1',
    transform: 'translateY(-1em) scale(1.3)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-2em) scale(1.6)'
  }
});
var iconScale$1 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(1)'
  },
  '32%': {
    transform: 'scale(1.15)'
  },
  '100%': {
    transform: 'scale(1.1)'
  }
});
var BALOON$1 = {
  durationMs: 800,
  animation: baloonFade$1
};
var TRIANGLES = {
  count: 5,
  size: 0.2,
  color: '#ff365e',
  durationMs: 300,
  animation: triangleFade
};
var CIRCLES = {
  count: 5,
  size: 0.05,
  color: '#4086ff',
  durationMs: 500,
  animation: triangleFade
};
var ICON$1 = {
  durationMs: CIRCLES.durationMs,
  animation: iconScale$1
};
var Medium = function Medium(_ref) {
  var isLoading = _ref.isLoading,
      userClaps = _ref.userClaps,
      totalClaps = _ref.totalClaps,
      handlePress = _ref.handlePress,
      isCounterVisible = _ref.isCounterVisible;

  var _useState = useState(false),
      animationActive = _useState[0],
      setAnimationActive = _useState[1];

  var triangles = [];

  for (var i = 0; i < TRIANGLES.count; i++) {
    triangles.push(jsx("div", {
      key: i,
      sx: {
        transform: "rotate(" + 360 / TRIANGLES.count * i + "deg)",
        transformOrigin: TRIANGLES.size + "em 0",
        marginLeft: "-" + TRIANGLES.size + "em"
      }
    }, jsx("div", {
      sx: {
        width: '0',
        height: '0',
        opacity: '0',
        borderLeft: TRIANGLES.size + "em solid transparent",
        borderRight: TRIANGLES.size + "em solid transparent",
        borderTop: TRIANGLES.size + "em solid " + TRIANGLES.color,
        position: 'absolute',
        animation: animationActive ? triangleFade + " " + TRIANGLES.durationMs + "ms ease forwards" : null
      }
    })));
  }

  var circles = [];

  for (var _i = 0; _i < CIRCLES.count; _i++) {
    circles.push(jsx("div", {
      key: _i,
      sx: {
        transform: "rotate(" + 360 / CIRCLES.count * _i + "deg)",
        transformOrigin: CIRCLES.size + "em 0",
        marginLeft: "-" + CIRCLES.size + "em"
      }
    }, jsx("div", {
      sx: {
        width: '0',
        height: '0',
        opacity: '0',
        padding: CIRCLES.size + "em",
        backgroundColor: "" + CIRCLES.color,
        borderRadius: '100%',
        position: 'absolute',
        animation: animationActive ? triangleFade + " " + CIRCLES.durationMs + "ms ease forwards" : null
      }
    })));
  }

  var timeoutId = useRef(null);
  var handleClick = useCallback(function (e) {
    setAnimationActive(true);

    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }

    timeoutId.current = setTimeout(function () {
      return setAnimationActive(false);
    }, BALOON$1.durationMs);
    handlePress(e);
  }, [handlePress]);
  var Icon = userClaps && userClaps > 0 ? ClapFull$1 : ClapEmpty;
  return jsx("div", {
    sx: style$1.root
  }, jsx("button", {
    onClick: handleClick,
    sx: style$1.button,
    disabled: isLoading
  }, jsx("div", {
    sx: style$1.centeredContainer
  }, " ", triangles, " "), jsx("div", {
    sx: style$1.centeredContainer
  }, " ", circles, " "), jsx("div", {
    sx: style$1.centeredContainer
  }, jsx("div", {
    key: timeoutId.current && timeoutId.current.toString(),
    sx: _extends({}, style$1.baloon, {
      animation: animationActive ? BALOON$1.animation + " " + BALOON$1.durationMs + "ms ease forwards" : null
    })
  }, userClaps)), jsx(Icon, {
    sx: {
      fill: isLoading ? '#aaa' : 'auto',
      height: '3em',
      transition: 'all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
      animation: animationActive ? ICON$1.animation + " " + ICON$1.durationMs + "ms ease forwards" : null
    }
  })), isCounterVisible && jsx("div", {
    sx: style$1.counter
  }, totalClaps));
};

var templates = {
  Simple: Simple,
  Medium: Medium
};

var ClapButton = function ClapButton(_ref) {
  var id = _ref.id,
      namespace = _ref.namespace,
      hideCounterIfLessThan = _ref.hideCounterIfLessThan,
      children = _ref.children,
      component = _ref.component,
      onLoad = _ref.onLoad,
      onPress = _ref.onPress;
  var client = useContext(ClientContext);

  var _useState = useState(null),
      response = _useState[0],
      setResponse = _useState[1];

  useSafeEffect(function () {
    try {
      return Promise.resolve(_catch(function () {
        var _temp = function () {
          if (client) {
            return Promise.resolve(client.clapButtons.info({
              id: id,
              namespace: namespace
            })).then(function (result) {
              setResponse(result.data);

              if (onLoad) {
                onLoad(camelizeKeys(result.data));
              }
            });
          }
        }();

        if (_temp && _temp.then) return _temp.then(function () {});
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace]);
  var handlePress = useCallback(function (e) {
    try {
      e.preventDefault();
      return Promise.resolve(_catch(function () {
        var _temp2 = function () {
          if (client) {
            return Promise.resolve(client.clapButtons.press({
              id: id,
              namespace: namespace
            })).then(function (result) {
              setResponse(result.data);

              if (onPress) {
                onPress(camelizeKeys(result.data));
              }
            });
          }
        }();

        if (_temp2 && _temp2.then) return _temp2.then(function () {});
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace]);
  var isCounterVisible = true;

  if (!response || hideCounterIfLessThan && response && response.attributes.total_claps < hideCounterIfLessThan) {
    isCounterVisible = false;
  }

  var props = {
    isLoading: !response,
    totalClaps: response && response.attributes.total_claps || 0,
    userClaps: response && response.attributes.user_claps || 0,
    handlePress: handlePress,
    isCounterVisible: isCounterVisible
  };

  if (children) {
    return children(props);
  }

  var Component = component || Simple;
  return React.createElement(Component, Object.assign({}, props));
};

ClapButton.templates = templates;

var ThumbIcon = function ThumbIcon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    id: "ThumUpWiki",
    viewBox: "0 0 215.34 215.34",
    className: className
  }, React.createElement("path", {
    d: "M7.67,93.896h52.077V215.34H7.67V93.896z M207.67,106.682c-7.189-7.189-14.382-14.379-21.572-21.57h-41.451l9.877-25.102  l2.801-7.119l-0.258-2.049L151,2.33L121.115,0L110.15,37.822L80.954,85.176V215.34h107.89L207.67,106.682z"
  }));
};

var style$2 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.5em',
    color: 'text',
    fontFamily: 'body',
    fontWeight: 'body'
  },
  icon: {
    height: '1em',
    display: 'block',
    margin: '0 auto',
    fill: 'text'
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: 'highlight',
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '100%',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    width: '3em',
    height: '3em',
    padding: '0',
    lineHeight: '1em'
  }
};

var theme$1 = {
  buttons: {
    inactive: {
      backgroundColor: 'background'
    },
    active: {
      transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
      backgroundColor: 'primary'
    }
  }
};

var iconScale$2 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(0)'
  },
  '52%': {
    transform: 'scale(1.2)'
  },
  '72%': {
    transform: 'scale(0.9)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var ringScale$1 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '1',
    borderWidth: '0.5em'
  },
  '52%': {
    opacity: '0',
    borderWidth: '0'
  }
});
var RING$1 = {
  durationMs: 600,
  animation: ringScale$1
};
var ICON$2 = {
  animation: iconScale$2,
  durationMs: 700
};
var Simple$1 = function Simple(_ref) {
  var isLoading = _ref.isLoading,
      userLiked = _ref.userLiked,
      totalLikes = _ref.totalLikes,
      handlePress = _ref.handlePress,
      isCounterVisible = _ref.isCounterVisible;

  var _useState = useState(false),
      animationActive = _useState[0],
      setAnimationActive = _useState[1];

  var handleClick = useCallback(function (e) {
    handlePress(e);

    if (!userLiked) {
      setAnimationActive(true);
      setTimeout(function () {
        return setAnimationActive(false);
      }, ICON$2.durationMs);
    }
  }, [userLiked, handlePress]);

  var iconStyle = _extends({}, style$2.icon, {
    animation: animationActive ? ICON$2.animation + " " + ICON$2.durationMs + "ms ease forwards" : null
  });

  var ringStyle = _extends({}, style$2.ring, {
    animation: animationActive ? RING$1.animation + " " + RING$1.durationMs + "ms ease forwards" : null
  });

  return jsx(ThemeProvider, {
    theme: theme$1
  }, jsx("div", {
    sx: style$2.root
  }, jsx("button", {
    onClick: handleClick,
    disabled: isLoading,
    sx: _extends({}, style$2.button, {
      variant: userLiked ? 'buttons.active' : 'buttons.inactive',
      '@media (hover: hover)': {
        ':hover': {
          variant: 'buttons.active'
        }
      }
    })
  }, jsx("div", {
    sx: ringStyle
  }), jsx(ThumbIcon, {
    sx: iconStyle
  })), isCounterVisible && jsx("div", {
    sx: style$2.counter
  }, totalLikes)));
};

var TwitterHeartFull = function TwitterHeartFull(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 24 24",
    className: className
  }, React.createElement("g", null, React.createElement("path", {
    d: "M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12z"
  })));
};

var TwitterHeartEmpty = function TwitterHeartEmpty(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 24 24",
    className: className
  }, React.createElement("g", null, React.createElement("path", {
    d: "M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z"
  })));
};

var style$3 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.2em'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '100%',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    width: '3em',
    height: '3em',
    padding: '0',
    lineHeight: '1em',
    '@media (hover: hover)': {
      ':hover': {
        transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
        backgroundColor: '#E5214A20'
      }
    }
  },
  dotsRotContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  dotsContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%) rotate(165deg)'
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  icon: {
    height: '2em',
    display: 'block',
    margin: '0 auto',
    animationTimingFunction: 'cubic-bezier(0.280, 0.840, 0.420, 1)'
  }
};

var dotBurst = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0',
    transform: 'translateY(-0.5em) scale(1)'
  },
  '52%': {
    opacity: '1',
    transform: 'translateY(-1.6em) scale(1.3)'
  },
  '100%': {
    transform: 'translateY(-2.7em) scale(0)'
  }
});
var iconScale$3 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(0)'
  },
  '52%': {
    transform: 'scale(1.2)'
  },
  '72%': {
    transform: 'scale(0.9)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var ringScale$2 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '1',
    borderWidth: '0.5em'
  },
  '52%': {
    opacity: '0',
    borderWidth: '0'
  }
});
var DOTS = {
  count: 6,
  size: 0.2,
  colors: ['lightcoral', 'yellow', 'pink', 'lightseagreen', 'orange', 'aliceblue'],
  durationMs: 600,
  animation: dotBurst
};
var RING$2 = {
  color: '#e095ed',
  durationMs: DOTS.durationMs,
  animation: ringScale$2
};
var HEART = {
  animation: iconScale$3,
  durationMs: 700
};
var Twitter = function Twitter(_ref) {
  var isLoading = _ref.isLoading,
      userLiked = _ref.userLiked,
      totalLikes = _ref.totalLikes,
      handlePress = _ref.handlePress,
      isCounterVisible = _ref.isCounterVisible;

  var _useState = useState(false),
      animationActive = _useState[0],
      setAnimationActive = _useState[1];

  var dots = [];

  for (var i = 0; i < DOTS.count; i++) {
    dots.push(jsx("div", {
      key: i,
      sx: {
        transform: "rotate(" + 360 / DOTS.count * i + "deg)",
        transformOrigin: DOTS.size + "em 0",
        marginLeft: "-" + DOTS.size + "em"
      }
    }, jsx("div", {
      sx: {
        opacity: '0',
        width: DOTS.size + "em",
        height: DOTS.size + "em",
        borderRadius: DOTS.size + "em",
        backgroundColor: "" + DOTS.colors[i],
        position: 'absolute',
        animation: animationActive ? dotBurst + " " + DOTS.durationMs + "ms ease forwards" : null
      }
    })));
  }

  var ring = jsx("div", {
    sx: _extends({}, style$3.ring, {
      border: "1px solid " + RING$2.color,
      animation: animationActive ? RING$2.animation + " " + RING$2.durationMs + "ms ease forwards" : null
    })
  });
  var handleClick = useCallback(function (e) {
    if (!userLiked) {
      setAnimationActive(true);
      setTimeout(function () {
        return setAnimationActive(false);
      }, DOTS.durationMs);
    }

    handlePress(e);
  }, [userLiked, handlePress]);
  var Icon = userLiked ? TwitterHeartFull : TwitterHeartEmpty;
  return jsx("div", {
    sx: style$3.root
  }, jsx("button", {
    onClick: handleClick,
    sx: style$3.button,
    disabled: isLoading
  }, jsx("div", {
    sx: style$3.dotsContainer
  }, " ", dots, " "), jsx("div", {
    sx: style$3.dotsRotContainer
  }, " ", dots, " "), ring, jsx(Icon, {
    sx: _extends({}, style$3.icon, {
      fill: isLoading ? '#aaa' : '#E5214A',
      animation: animationActive ? HEART.animation + " " + HEART.durationMs + "ms ease forwards" : null
    })
  })), isCounterVisible && jsx("div", {
    sx: style$3.counter
  }, totalLikes));
};

var templates$1 = {
  Simple: Simple$1,
  Twitter: Twitter
};

var LikeButton = function LikeButton(_ref) {
  var id = _ref.id,
      namespace = _ref.namespace,
      hideCounterIfLessThan = _ref.hideCounterIfLessThan,
      children = _ref.children,
      component = _ref.component,
      onLoad = _ref.onLoad,
      onPress = _ref.onPress;
  var client = useContext(ClientContext);

  var _useState = useState(null),
      response = _useState[0],
      setResponse = _useState[1];

  useSafeEffect(function () {
    try {
      return Promise.resolve(_catch(function () {
        var _temp = function () {
          if (client) {
            return Promise.resolve(client.likeButtons.info({
              id: id,
              namespace: namespace
            })).then(function (result) {
              setResponse(result.data);

              if (onLoad) {
                onLoad(camelizeKeys(result.data));
              }
            });
          }
        }();

        if (_temp && _temp.then) return _temp.then(function () {});
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace, onLoad]);
  var handlePress = useCallback(function (e) {
    try {
      e.preventDefault();

      if (!client) {
        return Promise.resolve();
      }

      return Promise.resolve(_catch(function () {
        return Promise.resolve(client.likeButtons.press({
          id: id,
          namespace: namespace
        })).then(function (result) {
          setResponse(result.data);

          if (onPress) {
            onPress(camelizeKeys(result.data));
          }
        });
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace, onPress]);
  var isCounterVisible = true;

  if (!response || hideCounterIfLessThan && response && response.attributes.total_likes < hideCounterIfLessThan) {
    isCounterVisible = false;
  }

  var props = {
    isLoading: !response,
    totalLikes: response && response.attributes.total_likes || 0,
    userLiked: response && response.attributes.user_has_liked || false,
    handlePress: handlePress,
    isCounterVisible: isCounterVisible
  };

  if (children) {
    return children(props);
  }

  var Component = component || Simple$1;
  return React.createElement(Component, Object.assign({}, props));
};

LikeButton.templates = templates$1;

var ThumbIcon$1 = function ThumbIcon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 215.34 215.34",
    className: className
  }, React.createElement("path", {
    d: "M7.67,93.896h52.077V215.34H7.67V93.896z M207.67,106.682c-7.189-7.189-14.382-14.379-21.572-21.57h-41.451l9.877-25.102  l2.801-7.119l-0.258-2.049L151,2.33L121.115,0L110.15,37.822L80.954,85.176V215.34h107.89L207.67,106.682z"
  }));
};

var style$4 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.5em',
    mr: '.5em',
    minWidth: '2em',
    color: 'text',
    textAlign: 'center',
    fontFamily: 'body',
    fontWeight: 'body'
  },
  icon: {
    height: '1em',
    display: 'block',
    margin: '0 auto',
    fill: 'text'
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: 'highlight',
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '100%',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    width: '3em',
    height: '3em',
    padding: '0',
    lineHeight: '1em'
  }
};

var theme$2 = {
  buttons: {
    upInactive: {
      backgroundColor: 'background'
    },
    upActive: {
      backgroundColor: 'primary',
      transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
    },
    downInactive: {
      backgroundColor: 'background'
    },
    downActive: {
      transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
      backgroundColor: 'secondary'
    }
  }
};

var iconScale$4 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(0)'
  },
  '52%': {
    transform: 'scale(1.2)'
  },
  '72%': {
    transform: 'scale(0.9)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var ringScale$3 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '1',
    borderWidth: '0.5em'
  },
  '52%': {
    opacity: '0',
    borderWidth: '0'
  }
});
var RING$3 = {
  durationMs: 600,
  animation: ringScale$3
};
var ICON$3 = {
  animation: iconScale$4,
  durationMs: 700
};
var Simple$2 = function Simple(_ref) {
  var isLoading = _ref.isLoading,
      userVoteDirection = _ref.userVoteDirection,
      totalScore = _ref.totalScore,
      handlePressUp = _ref.handlePressUp,
      handlePressDown = _ref.handlePressDown,
      isCounterVisible = _ref.isCounterVisible;

  var _useState = useState(false),
      animationActiveUp = _useState[0],
      setAnimationActiveUp = _useState[1];

  var _useState2 = useState(false),
      animationActiveDown = _useState2[0],
      setAnimationActiveDown = _useState2[1];

  var handleClickUp = useCallback(function (e) {
    handlePressUp(e);

    if (userVoteDirection !== 1) {
      setAnimationActiveUp(true);
      setTimeout(function () {
        return setAnimationActiveUp(false);
      }, ICON$3.durationMs);
    }
  }, [userVoteDirection, handlePressUp]);
  var handleClickDown = useCallback(function (e) {
    handlePressDown(e);

    if (userVoteDirection !== -1) {
      setAnimationActiveDown(true);
      setTimeout(function () {
        return setAnimationActiveDown(false);
      }, ICON$3.durationMs);
    }
  }, [userVoteDirection, handlePressDown]);

  var iconStyleUp = _extends({}, style$4.icon, {
    animation: animationActiveUp ? ICON$3.animation + " " + ICON$3.durationMs + "ms ease forwards" : null
  });

  var iconStyleDown = _extends({}, style$4.icon, {
    animation: animationActiveDown ? ICON$3.animation + " " + ICON$3.durationMs + "ms ease forwards" : null
  });

  var ringStyleUp = _extends({}, style$4.ring, {
    animation: animationActiveUp ? RING$3.animation + " " + RING$3.durationMs + "ms ease forwards" : null
  });

  var ringStyleDown = _extends({}, style$4.ring, {
    animation: animationActiveDown ? RING$3.animation + " " + RING$3.durationMs + "ms ease forwards" : null
  });

  return jsx(ThemeProvider, {
    theme: theme$2
  }, jsx("div", {
    sx: style$4.root
  }, jsx("button", {
    onClick: handleClickUp,
    disabled: isLoading,
    sx: _extends({}, style$4.button, {
      variant: userVoteDirection === 1 ? 'buttons.upActive' : 'buttons.upInactive',
      '@media (hover: hover)': {
        ':hover': {
          variant: 'buttons.upActive'
        }
      }
    })
  }, jsx("div", {
    sx: ringStyleUp
  }), jsx(ThumbIcon$1, {
    sx: iconStyleUp
  })), isCounterVisible && jsx("div", {
    sx: style$4.counter
  }, totalScore), isLoading && jsx("div", {
    sx: style$4.counter
  }, "-"), jsx("button", {
    onClick: handleClickDown,
    disabled: isLoading,
    sx: _extends({}, style$4.button, {
      transform: 'rotate(180deg)',
      variant: userVoteDirection === -1 ? 'buttons.downActive' : 'buttons.downInactive',
      '@media (hover: hover)': {
        ':hover': {
          variant: 'buttons.downActive'
        }
      }
    })
  }, jsx("div", {
    sx: ringStyleDown
  }), jsx(ThumbIcon$1, {
    sx: iconStyleDown
  }))));
};

var RedditArrow = function RedditArrow(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.0",
    viewBox: "0 0 1280 1280",
    className: className,
    preserveAspectRatio: "xMidYMid meet"
  }, React.createElement("g", {
    transform: "translate(0,1280) scale(0.100000,-0.100000)",
    stroke: "none"
  }, React.createElement("path", {
    d: "M6245 12778 c-200 -44 -333 -117 -494 -272 -53 -51 -1149 -1102\n  -2436 -2336 -3028 -2904 -3071 -2945 -3122 -3010 -133 -170 -219 -465 -183\n  -629 35 -159 45 -192 80 -267 50 -109 104 -185 187 -265 83 -81 140 -119 246\n  -169 175 -81 33 -74 1677 -77 1359 -3 1466 -4 1478 -20 9 -13 12 -527 12\n  -2487 0 -2658 -2 -2524 50 -2663 84 -226 259 -410 479 -503 40 -17 123 -42\n  184 -56 l112 -24 1905 3 c1897 2 1905 2 1995 23 173 41 319 120 439 238 104\n  102 171 212 222 366 l29 85 5 2507 c3 1701 8 2510 15 2517 7 7 487 12 1475 13\n  1644 4 1502 -3 1677 78 104 48 161 88 247 169 137 131 213 277 256 491 25 119\n  25 151 0 270 -32 159 -75 262 -155 375 -53 75 -26 49 -3010 2910 -1353 1297\n  -2506 2402 -2561 2456 -169 163 -299 234 -509 278 -119 25 -181 25 -300 -1z"
  })));
};

var style$5 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center',
    flexDirection: 'column'
  },
  counter: {
    mt: '.2em',
    mb: '.2em',
    minWidth: '2em',
    textAlign: 'center'
  },
  icon: {
    height: '1em',
    display: 'block',
    margin: '0 auto',
    animationTimingFunction: 'cubic-bezier(0.280, 0.840, 0.420, 1)'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '3px',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    width: '2em',
    height: '2em',
    padding: '0',
    lineHeight: '1em'
  }
};

var theme$3 = {
  colors: {
    lightGray: '#25252510',
    darkGray: '#878a8c',
    blue: '#5a75cc',
    red: '#cc3700'
  },
  buttons: {
    downInactive: {
      svg: {
        fill: 'darkGray'
      }
    },
    upInactive: {
      svg: {
        fill: 'darkGray'
      }
    },
    upActive: {
      backgroundColor: 'lightGray',
      svg: {
        fill: 'red'
      }
    },
    downActive: {
      backgroundColor: 'lightGray',
      svg: {
        fill: 'blue'
      }
    }
  }
};

var iconScale$5 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(0)'
  },
  '52%': {
    transform: 'scale(1.2)'
  },
  '72%': {
    transform: 'scale(0.9)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var ICON$4 = {
  animation: iconScale$5,
  durationMs: 700
};
var Reddit = function Reddit(_ref) {
  var isLoading = _ref.isLoading,
      userVoteDirection = _ref.userVoteDirection,
      totalScore = _ref.totalScore,
      handlePressUp = _ref.handlePressUp,
      handlePressDown = _ref.handlePressDown,
      isCounterVisible = _ref.isCounterVisible;

  var _useState = useState(false),
      animationActiveUp = _useState[0],
      setAnimationActiveUp = _useState[1];

  var _useState2 = useState(false),
      animationActiveDown = _useState2[0],
      setAnimationActiveDown = _useState2[1];

  var handleClickUp = useCallback(function (e) {
    handlePressUp(e);

    if (userVoteDirection !== 1) {
      setAnimationActiveUp(true);
      setTimeout(function () {
        return setAnimationActiveUp(false);
      }, ICON$4.durationMs);
    }
  }, [userVoteDirection, handlePressUp]);
  var handleClickDown = useCallback(function (e) {
    handlePressDown(e);

    if (userVoteDirection !== -1) {
      setAnimationActiveDown(true);
      setTimeout(function () {
        return setAnimationActiveDown(false);
      }, ICON$4.durationMs);
    }
  }, [userVoteDirection, handlePressDown]);

  var iconStyleUp = _extends({}, style$5.icon, {
    animation: animationActiveUp ? ICON$4.animation + " " + ICON$4.durationMs + "ms ease forwards" : null
  });

  var iconStyleDown = _extends({}, style$5.icon, {
    animation: animationActiveDown ? ICON$4.animation + " " + ICON$4.durationMs + "ms ease forwards" : null
  });

  return jsx(ThemeProvider, {
    theme: theme$3
  }, jsx("div", {
    sx: style$5.root
  }, jsx("button", {
    onClick: handleClickUp,
    disabled: isLoading,
    sx: _extends({}, style$5.button, {
      variant: userVoteDirection === 1 ? 'buttons.upActive' : 'buttons.upInactive',
      '@media (hover: hover)': {
        ':hover': {
          variant: 'buttons.upActive',
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
        }
      }
    })
  }, jsx(RedditArrow, {
    sx: iconStyleUp
  })), isCounterVisible && jsx("div", {
    sx: style$5.counter
  }, totalScore), isLoading && jsx("div", {
    sx: style$5.counter
  }, "-"), jsx("button", {
    onClick: handleClickDown,
    disabled: isLoading,
    sx: _extends({}, style$5.button, {
      transform: 'rotate(180deg)',
      variant: userVoteDirection === -1 ? 'buttons.downActive' : 'buttons.downInactive',
      '@media (hover: hover)': {
        ':hover': {
          variant: 'buttons.downActive',
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
        }
      }
    })
  }, jsx(RedditArrow, {
    sx: iconStyleDown
  }))));
};

var templates$2 = {
  Simple: Simple$2,
  Reddit: Reddit
};

var UpdownButton = function UpdownButton(_ref) {
  var id = _ref.id,
      namespace = _ref.namespace,
      hideCounterIfLessThan = _ref.hideCounterIfLessThan,
      children = _ref.children,
      component = _ref.component,
      onLoad = _ref.onLoad,
      onPressUp = _ref.onPressUp,
      onPressDown = _ref.onPressDown;
  var client = useContext(ClientContext);

  var _useState = useState(null),
      response = _useState[0],
      setResponse = _useState[1];

  useSafeEffect(function () {
    try {
      return Promise.resolve(_catch(function () {
        var _temp = function () {
          if (client) {
            return Promise.resolve(client.updownButtons.info({
              id: id,
              namespace: namespace
            })).then(function (result) {
              setResponse(result.data);

              if (onLoad) {
                onLoad(camelizeKeys(result.data));
              }
            });
          }
        }();

        if (_temp && _temp.then) return _temp.then(function () {});
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace, onLoad]);
  var handlePressUp = useCallback(function (e) {
    try {
      e.preventDefault();
      return Promise.resolve(_catch(function () {
        var _temp2 = function () {
          if (client) {
            return Promise.resolve(client.updownButtons.pressUp({
              id: id,
              namespace: namespace
            })).then(function (result) {
              setResponse(result.data);

              if (onPressUp) {
                onPressUp(camelizeKeys(result.data));
              }
            });
          }
        }();

        if (_temp2 && _temp2.then) return _temp2.then(function () {});
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace, onPressUp]);
  var handlePressDown = useCallback(function (e) {
    try {
      e.preventDefault();
      return Promise.resolve(_catch(function () {
        var _temp3 = function () {
          if (client) {
            return Promise.resolve(client.updownButtons.pressDown({
              id: id,
              namespace: namespace
            })).then(function (result) {
              setResponse(result.data);

              if (onPressDown) {
                onPressDown(camelizeKeys(result.data));
              }
            });
          }
        }();

        if (_temp3 && _temp3.then) return _temp3.then(function () {});
      }, function (error) {
        console.error('Lyket error:', error);
        throw error;
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [client, id, namespace, onPressDown]);
  var isCounterVisible = true;

  if (!response || hideCounterIfLessThan && response && response.attributes.total_score < hideCounterIfLessThan) {
    isCounterVisible = false;
  }

  var props = {
    isLoading: !response,
    totalScore: response && response.attributes.total_score || 0,
    userVoteDirection: response && response.attributes.user_vote_direction || 0,
    handlePressUp: handlePressUp,
    handlePressDown: handlePressDown,
    isCounterVisible: isCounterVisible
  };

  if (children) {
    return children(props);
  }

  var Component = component || Simple$2;
  return React.createElement(Component, Object.assign({}, props));
};

UpdownButton.templates = templates$2;

export { ClapButton, Client, LikeButton, Provider, UpdownButton };
//# sourceMappingURL=react.esm.js.map
